{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const burnCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createBurnCheckedInstruction(account, mint, owner, amount, decimals) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(burnCheckedInstructionData.span);\n  burnCheckedInstructionData.encode({\n    instruction: TokenInstruction.BurnChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeBurnCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== burnCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeBurnCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.BurnChecked) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeBurnCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data: burnCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","burnCheckedInstructionData","createBurnCheckedInstruction","account","mint","owner","amount","decimals","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","BurnChecked","BigInt","decodeBurnCheckedInstruction","equals","length","decodeBurnCheckedInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/burnChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface BurnCheckedInstructionData {\n    instruction: TokenInstruction.BurnChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const burnCheckedInstructionData = struct<BurnCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a BurnChecked instruction\n *\n * @param mint         Mint for the account\n * @param account      Account to burn tokens from\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param decimals     Number of decimals in burn amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnCheckedInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(burnCheckedInstructionData.span);\n    burnCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.BurnChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid BurnChecked instruction */\nexport interface DecodedBurnCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.BurnChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a BurnChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedBurnCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, multiSigners },\n        data,\n    } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.BurnChecked) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated BurnChecked instruction */\nexport interface DecodedBurnCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a BurnChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedBurnCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnCheckedInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}