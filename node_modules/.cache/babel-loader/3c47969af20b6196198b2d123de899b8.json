{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const mintToInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createMintToInstruction(mint, destination, authority, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(mintToInstructionData.span);\n  mintToInstructionData.encode({\n    instruction: TokenInstruction.MintTo,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeMintToInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== mintToInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeMintToInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.MintTo) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeMintToInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: mintToInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","mintToInstructionData","createMintToInstruction","mint","destination","authority","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","MintTo","BigInt","decodeMintToInstruction","equals","length","decodeMintToInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/mintTo.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface MintToInstructionData {\n    instruction: TokenInstruction.MintTo;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const mintToInstructionData = struct<MintToInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a MintTo instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(mintToInstructionData.span);\n    mintToInstructionData.encode(\n        {\n            instruction: TokenInstruction.MintTo,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid MintTo instruction */\nexport interface DecodedMintToInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.MintTo;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedMintToInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, multiSigners },\n        data,\n    } = decodeMintToInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintTo) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated MintTo instruction */\nexport interface DecodedMintToInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a MintTo instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedMintToInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}