{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createTransferCheckedInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Transfer tokens from one account to another, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function transferChecked(connection, payer, source, mint, destination, owner, amount, decimals) {\n  let multiSigners = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];\n  let confirmOptions = arguments.length > 9 ? arguments[9] : undefined;\n  let programId = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : TOKEN_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createTransferCheckedInstruction(source, mint, destination, ownerPublicKey, amount, decimals, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"mappings":"AAAA,SAIIA,yBAJJ,EAMIC,WANJ,QAQO,iBARP;AASA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,gCAAT,QAAiD,6BAAjD;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,eAAeC,eAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,MAHG,EAIHC,IAJG,EAKHC,WALG,EAMHC,KANG,EAOHC,MAPG,EAQHC,QARG,EAWyB;EAAA,IAF5BC,YAE4B,uEAFH,EAEG;EAAA,IAD5BC,cAC4B;EAAA,IAA5BC,SAA4B,0EAAhBd,gBAAgB;EAE5B,MAAM,CAACe,cAAD,EAAiBC,OAAjB,IAA4Bd,UAAU,CAACO,KAAD,EAAQG,YAAR,CAA5C;EAEA,MAAMK,WAAW,GAAG,IAAIlB,WAAJ,GAAkBmB,GAAlB,CAChBjB,gCAAgC,CAC5BK,MAD4B,EAE5BC,IAF4B,EAG5BC,WAH4B,EAI5BO,cAJ4B,EAK5BL,MAL4B,EAM5BC,QAN4B,EAO5BC,YAP4B,EAQ5BE,SAR4B,CADhB,CAApB;EAaA,OAAO,MAAMhB,yBAAyB,CAACM,UAAD,EAAaa,WAAb,EAA0B,CAACZ,KAAD,EAAQ,GAAGW,OAAX,CAA1B,EAA+CH,cAA/C,CAAtC;AACH","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createTransferCheckedInstruction","getSigners","transferChecked","connection","payer","source","mint","destination","owner","amount","decimals","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/transferChecked.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createTransferCheckedInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Transfer tokens from one account to another, asserting the token mint and decimals\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param source         Source account\n * @param mint           Mint for the account\n * @param destination    Destination account\n * @param owner          Owner of the source account\n * @param amount         Number of tokens to transfer\n * @param decimals       Number of decimals in transfer amount\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function transferChecked(\n    connection: Connection,\n    payer: Signer,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: Signer | PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createTransferCheckedInstruction(\n            source,\n            mint,\n            destination,\n            ownerPublicKey,\n            amount,\n            decimals,\n            multiSigners,\n            programId\n        )\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module"}