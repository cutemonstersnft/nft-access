{"ast":null,"code":"import { blob } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base.mjs';\nexport const publicKey = property => {\n  const layout = blob(32, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const publicKeyLayout = layout;\n\n  publicKeyLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return new PublicKey(src);\n  };\n\n  publicKeyLayout.encode = (publicKey, buffer, offset) => {\n    const src = publicKey.toBuffer();\n    return encode(src, buffer, offset);\n  };\n\n  return publicKeyLayout;\n};","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAA6B,uBAA7B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,OAAO,MAAMC,SAAS,GAAIC,QAAD,IAAyC;EAC9D,MAAMC,MAAM,GAAGL,IAAI,CAAC,EAAD,EAAKI,QAAL,CAAnB;EACA,MAAM;IAAEE,MAAF;IAAUC;EAAV,IAAqBL,YAAY,CAACG,MAAD,CAAvC;EAEA,MAAMG,eAAe,GAAGH,MAAxB;;EAEAG,eAAe,CAACD,MAAhB,GAAyB,CAACE,MAAD,EAAiBC,MAAjB,KAAmC;IACxD,MAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAD,EAASC,MAAT,CAAlB;IACA,OAAO,IAAIT,SAAJ,CAAcU,GAAd,CAAP;EACH,CAHD;;EAKAH,eAAe,CAACF,MAAhB,GAAyB,CAACH,SAAD,EAAuBM,MAAvB,EAAuCC,MAAvC,KAAyD;IAC9E,MAAMC,GAAG,GAAGR,SAAS,CAACS,QAAV,EAAZ;IACA,OAAON,MAAM,CAACK,GAAD,EAAMF,MAAN,EAAcC,MAAd,CAAb;EACH,CAHD;;EAKA,OAAOF,eAAP;AACH,CAjBM","names":["blob","PublicKey","encodeDecode","publicKey","property","layout","encode","decode","publicKeyLayout","buffer","offset","src","toBuffer"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/buffer-layout-utils/src/web3.ts"],"sourcesContent":["import { blob, Layout } from '@solana/buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { encodeDecode } from './base';\n\nexport const publicKey = (property?: string): Layout<PublicKey> => {\n    const layout = blob(32, property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const publicKeyLayout = layout as Layout<unknown> as Layout<PublicKey>;\n\n    publicKeyLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset);\n        return new PublicKey(src);\n    };\n\n    publicKeyLayout.encode = (publicKey: PublicKey, buffer: Buffer, offset: number) => {\n        const src = publicKey.toBuffer();\n        return encode(src, buffer, offset);\n    };\n\n    return publicKeyLayout;\n};\n"]},"metadata":{},"sourceType":"module"}