{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createSyncNativeInstruction } from './../instructions/index.mjs';\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function syncNative(connection, payer, account, confirmOptions) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}","map":{"version":3,"mappings":"AAAA,SAIIA,yBAJJ,EAMIC,WANJ,QAQO,iBARP;AASA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,2BAAT,QAA4C,6BAA5C;AAEA;;;;;;;;;;;;AAWA,OAAO,eAAeC,UAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,OAHG,EAIHC,cAJG,EAKyB;EAAA,IAA5BC,SAA4B,uEAAhBP,gBAAgB;EAE5B,MAAMQ,WAAW,GAAG,IAAIT,WAAJ,GAAkBU,GAAlB,CAAsBR,2BAA2B,CAACI,OAAD,EAAUE,SAAV,CAAjD,CAApB;EAEA,OAAO,MAAMT,yBAAyB,CAACK,UAAD,EAAaK,WAAb,EAA0B,CAACJ,KAAD,CAA1B,EAAmCE,cAAnC,CAAtC;AACH","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createSyncNativeInstruction","syncNative","connection","payer","account","confirmOptions","programId","transaction","add"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/syncNative.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createSyncNativeInstruction } from '../instructions/index';\n\n/**\n * Sync the balance of a native SPL token account to the underlying system account's lamports\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Native account to sync\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function syncNative(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const transaction = new Transaction().add(createSyncNativeInstruction(account, programId));\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module"}