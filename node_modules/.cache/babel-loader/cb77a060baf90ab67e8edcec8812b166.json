{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const approveCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createApproveCheckedInstruction(account, mint, delegate, owner, amount, decimals) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(approveCheckedInstructionData.span);\n  approveCheckedInstructionData.encode({\n    instruction: TokenInstruction.ApproveChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeApproveCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== approveCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.ApproveChecked) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !delegate || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeApproveCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, delegate, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: approveCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","approveCheckedInstructionData","createApproveCheckedInstruction","account","mint","delegate","owner","amount","decimals","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","ApproveChecked","BigInt","decodeApproveCheckedInstruction","equals","length","decodeApproveCheckedInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/approveChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface ApproveCheckedInstructionData {\n    instruction: TokenInstruction.ApproveChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const approveCheckedInstructionData = struct<ApproveCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct an ApproveChecked instruction\n *\n * @param account      Account to set the delegate for\n * @param mint         Mint account\n * @param delegate     Account authorized to transfer of tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param decimals     Number of decimals in approve amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveCheckedInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(approveCheckedInstructionData.span);\n    approveCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.ApproveChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid ApproveChecked instruction */\nexport interface DecodedApproveCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        delegate: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.ApproveChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode an ApproveChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedApproveCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, delegate, owner, multiSigners },\n        data,\n    } = decodeApproveCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.ApproveChecked) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated ApproveChecked instruction */\nexport interface DecodedApproveCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        delegate: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode an ApproveChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, delegate, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedApproveCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveCheckedInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}