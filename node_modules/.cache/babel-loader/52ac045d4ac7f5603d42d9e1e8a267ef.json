{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const initializeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeAccountInstruction(account, mint, owner) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  const data = Buffer.alloc(initializeAccountInstructionData.span);\n  initializeAccountInstructionData.encode({\n    instruction: TokenInstruction.InitializeAccount\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  } = decodeInitializeAccountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, rent],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      rent\n    },\n    data: initializeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,EAAjB,QAA2B,uBAA3B;AACA,SAAiCC,kBAAjC,EAAqDC,sBAArD,QAAmF,iBAAnF;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACIC,gCADJ,EAEIC,gCAFJ,EAGIC,mCAHJ,EAIIC,gCAJJ,QAKO,iBALP;AAMA,SAASC,gBAAT,QAAiC,aAAjC;AAOA;;AACA,OAAO,MAAMC,gCAAgC,GAAGV,MAAM,CAAmC,CAACC,EAAE,CAAC,aAAD,CAAH,CAAnC,CAA/C;AAEP;;;;;;;;;;;AAUA,OAAM,SAAUU,kCAAV,CACFC,OADE,EAEFC,IAFE,EAGFC,KAHE,EAI0B;EAAA,IAA5BC,SAA4B,uEAAhBX,gBAAgB;EAE5B,MAAMY,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEL,OAAV;IAAmBM,QAAQ,EAAE,KAA7B;IAAoCC,UAAU,EAAE;EAAhD,CADS,EAET;IAAEF,MAAM,EAAEJ,IAAV;IAAgBK,QAAQ,EAAE,KAA1B;IAAiCC,UAAU,EAAE;EAA7C,CAFS,EAGT;IAAEF,MAAM,EAAEH,KAAV;IAAiBI,QAAQ,EAAE,KAA3B;IAAkCC,UAAU,EAAE;EAA9C,CAHS,EAIT;IAAEF,MAAM,EAAEf,kBAAV;IAA8BgB,QAAQ,EAAE,KAAxC;IAA+CC,UAAU,EAAE;EAA3D,CAJS,CAAb;EAOA,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaZ,gCAAgC,CAACa,IAA9C,CAAb;EACAb,gCAAgC,CAACc,MAAjC,CAAwC;IAAEC,WAAW,EAAEhB,gBAAgB,CAACiB;EAAhC,CAAxC,EAA6FN,IAA7F;EAEA,OAAO,IAAIjB,sBAAJ,CAA2B;IAAEa,IAAF;IAAQD,SAAR;IAAmBK;EAAnB,CAA3B,CAAP;AACH;AAgBD;;;;;;;;;AAQA,OAAM,SAAUO,kCAAV,CACFF,WADE,EAE0B;EAAA,IAA5BV,SAA4B,uEAAhBX,gBAAgB;EAE5B,IAAI,CAACqB,WAAW,CAACV,SAAZ,CAAsBa,MAAtB,CAA6Bb,SAA7B,CAAL,EAA8C,MAAM,IAAIR,mCAAJ,EAAN;EAC9C,IAAIkB,WAAW,CAACL,IAAZ,CAAiBS,MAAjB,KAA4BnB,gCAAgC,CAACa,IAAjE,EAAuE,MAAM,IAAIlB,gCAAJ,EAAN;EAEvE,MAAM;IACFW,IAAI,EAAE;MAAEJ,OAAF;MAAWC,IAAX;MAAiBC,KAAjB;MAAwBgB;IAAxB,CADJ;IAEFV;EAFE,IAGFW,2CAA2C,CAACN,WAAD,CAH/C;EAIA,IAAIL,IAAI,CAACK,WAAL,KAAqBhB,gBAAgB,CAACiB,iBAA1C,EAA6D,MAAM,IAAIlB,gCAAJ,EAAN;EAC7D,IAAI,CAACI,OAAD,IAAY,CAACC,IAAb,IAAqB,CAACC,KAAtB,IAA+B,CAACgB,IAApC,EAA0C,MAAM,IAAIxB,gCAAJ,EAAN,CAVd,CAY5B;;EAEA,OAAO;IACHS,SADG;IAEHC,IAAI,EAAE;MACFJ,OADE;MAEFC,IAFE;MAGFC,KAHE;MAIFgB;IAJE,CAFH;IAQHV;EARG,CAAP;AAUH;AAgBD;;;;;;;;AAOA,OAAM,SAAUW,2CAAV,OAImB;EAAA,IAJmC;IACxDhB,SADwD;IAExDC,IAAI,EAAE,CAACJ,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBgB,IAAvB,CAFkD;IAGxDV;EAHwD,CAInC;EACrB,OAAO;IACHL,SADG;IAEHC,IAAI,EAAE;MACFJ,OADE;MAEFC,IAFE;MAGFC,KAHE;MAIFgB;IAJE,CAFH;IAQHV,IAAI,EAAEV,gCAAgC,CAACsB,MAAjC,CAAwCZ,IAAxC;EARH,CAAP;AAUH","names":["struct","u8","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeAccountInstructionData","createInitializeAccountInstruction","account","mint","owner","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","InitializeAccount","decodeInitializeAccountInstruction","equals","length","rent","decodeInitializeAccountInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/initializeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface InitializeAccountInstructionData {\n    instruction: TokenInstruction.InitializeAccount;\n}\n\n/** TODO: docs */\nexport const initializeAccountInstructionData = struct<InitializeAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct an InitializeAccount instruction\n *\n * @param account   New token account\n * @param mint      Mint account\n * @param owner     Owner of the new account\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeAccountInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    const data = Buffer.alloc(initializeAccountInstructionData.span);\n    initializeAccountInstructionData.encode({ instruction: TokenInstruction.InitializeAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        rent: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.InitializeAccount;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, rent },\n        data,\n    } = decodeInitializeAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner || !rent) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeAccount instruction */\nexport interface DecodedInitializeAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode an InitializeAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeAccountInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, rent],\n    data,\n}: TransactionInstruction): DecodedInitializeAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            rent,\n        },\n        data: initializeAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}