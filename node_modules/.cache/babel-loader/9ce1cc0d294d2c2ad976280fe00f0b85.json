{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base.mjs';\nimport { u128 } from './bigint.mjs';\nexport const WAD = new BigNumber('1e+18');\nexport const decimal = property => {\n  const layout = u128(property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const decimalLayout = layout;\n\n  decimalLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset).toString();\n    return new BigNumber(src).div(WAD);\n  };\n\n  decimalLayout.encode = (decimal, buffer, offset) => {\n    const src = BigInt(decimal.times(WAD).integerValue().toString());\n    return encode(src, buffer, offset);\n  };\n\n  return decimalLayout;\n};","map":{"version":3,"mappings":"AACA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIH,SAAJ,CAAc,OAAd,CAAZ;AAEP,OAAO,MAAMI,OAAO,GAAIC,QAAD,IAAyC;EAC5D,MAAMC,MAAM,GAAGJ,IAAI,CAACG,QAAD,CAAnB;EACA,MAAM;IAAEE,MAAF;IAAUC;EAAV,IAAqBP,YAAY,CAACK,MAAD,CAAvC;EAEA,MAAMG,aAAa,GAAGH,MAAtB;;EAEAG,aAAa,CAACD,MAAd,GAAuB,CAACE,MAAD,EAAiBC,MAAjB,KAAmC;IACtD,MAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAD,EAASC,MAAT,CAAN,CAAuBE,QAAvB,EAAZ;IACA,OAAO,IAAIb,SAAJ,CAAcY,GAAd,EAAmBE,GAAnB,CAAuBX,GAAvB,CAAP;EACH,CAHD;;EAKAM,aAAa,CAACF,MAAd,GAAuB,CAACH,OAAD,EAAqBM,MAArB,EAAqCC,MAArC,KAAuD;IAC1E,MAAMC,GAAG,GAAGG,MAAM,CAACX,OAAO,CAACY,KAAR,CAAcb,GAAd,EAAmBc,YAAnB,GAAkCJ,QAAlC,EAAD,CAAlB;IACA,OAAON,MAAM,CAACK,GAAD,EAAMF,MAAN,EAAcC,MAAd,CAAb;EACH,CAHD;;EAKA,OAAOF,aAAP;AACH,CAjBM","names":["BigNumber","encodeDecode","u128","WAD","decimal","property","layout","encode","decode","decimalLayout","buffer","offset","src","toString","div","BigInt","times","integerValue"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/buffer-layout-utils/src/decimal.ts"],"sourcesContent":["import { Layout } from '@solana/buffer-layout';\nimport BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base';\nimport { u128 } from './bigint';\n\nexport const WAD = new BigNumber('1e+18');\n\nexport const decimal = (property?: string): Layout<BigNumber> => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n\n    const decimalLayout = layout as Layout<unknown> as Layout<BigNumber>;\n\n    decimalLayout.decode = (buffer: Buffer, offset: number) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n\n    decimalLayout.encode = (decimal: BigNumber, buffer: Buffer, offset: number) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n\n    return decimalLayout;\n};\n"]},"metadata":{},"sourceType":"module"}