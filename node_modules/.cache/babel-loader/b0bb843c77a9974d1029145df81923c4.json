{"ast":null,"code":"import { blob } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base.mjs';\nexport const bigInt = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntLE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferLE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\nexport const bigIntBE = length => property => {\n  const layout = blob(length, property);\n  const {\n    encode,\n    decode\n  } = encodeDecode(layout);\n  const bigIntLayout = layout;\n\n  bigIntLayout.decode = (buffer, offset) => {\n    const src = decode(buffer, offset);\n    return toBigIntBE(Buffer.from(src));\n  };\n\n  bigIntLayout.encode = (bigInt, buffer, offset) => {\n    const src = toBufferBE(bigInt, length);\n    return encode(src, buffer, offset);\n  };\n\n  return bigIntLayout;\n};\nexport const u64 = bigInt(8);\nexport const u64be = bigIntBE(8);\nexport const u128 = bigInt(16);\nexport const u128be = bigIntBE(16);\nexport const u192 = bigInt(24);\nexport const u192be = bigIntBE(24);\nexport const u256 = bigInt(32);\nexport const u256be = bigIntBE(32);","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAA6B,uBAA7B;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,UAAjC,EAA6CC,UAA7C,QAA+D,eAA/D;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,OAAO,MAAMC,MAAM,GACdC,MAAD,IACCC,QAAD,IAAsC;EAClC,MAAMC,MAAM,GAAGT,IAAI,CAACO,MAAD,EAASC,QAAT,CAAnB;EACA,MAAM;IAAEE,MAAF;IAAUC;EAAV,IAAqBN,YAAY,CAACI,MAAD,CAAvC;EAEA,MAAMG,YAAY,GAAGH,MAArB;;EAEAG,YAAY,CAACD,MAAb,GAAsB,CAACE,MAAD,EAAiBC,MAAjB,KAAmC;IACrD,MAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAD,EAASC,MAAT,CAAlB;IACA,OAAOZ,UAAU,CAACc,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAD,CAAjB;EACH,CAHD;;EAKAH,YAAY,CAACF,MAAb,GAAsB,CAACJ,MAAD,EAAiBO,MAAjB,EAAiCC,MAAjC,KAAmD;IACrE,MAAMC,GAAG,GAAGX,UAAU,CAACE,MAAD,EAASC,MAAT,CAAtB;IACA,OAAOG,MAAM,CAACK,GAAD,EAAMF,MAAN,EAAcC,MAAd,CAAb;EACH,CAHD;;EAKA,OAAOF,YAAP;AACH,CAnBE;AAqBP,OAAO,MAAMM,QAAQ,GAChBX,MAAD,IACCC,QAAD,IAAsC;EAClC,MAAMC,MAAM,GAAGT,IAAI,CAACO,MAAD,EAASC,QAAT,CAAnB;EACA,MAAM;IAAEE,MAAF;IAAUC;EAAV,IAAqBN,YAAY,CAACI,MAAD,CAAvC;EAEA,MAAMG,YAAY,GAAGH,MAArB;;EAEAG,YAAY,CAACD,MAAb,GAAsB,CAACE,MAAD,EAAiBC,MAAjB,KAAmC;IACrD,MAAMC,GAAG,GAAGJ,MAAM,CAACE,MAAD,EAASC,MAAT,CAAlB;IACA,OAAOb,UAAU,CAACe,MAAM,CAACC,IAAP,CAAYF,GAAZ,CAAD,CAAjB;EACH,CAHD;;EAKAH,YAAY,CAACF,MAAb,GAAsB,CAACJ,MAAD,EAAiBO,MAAjB,EAAiCC,MAAjC,KAAmD;IACrE,MAAMC,GAAG,GAAGZ,UAAU,CAACG,MAAD,EAASC,MAAT,CAAtB;IACA,OAAOG,MAAM,CAACK,GAAD,EAAMF,MAAN,EAAcC,MAAd,CAAb;EACH,CAHD;;EAKA,OAAOF,YAAP;AACH,CAnBE;AAqBP,OAAO,MAAMO,GAAG,GAAGb,MAAM,CAAC,CAAD,CAAlB;AAEP,OAAO,MAAMc,KAAK,GAAGF,QAAQ,CAAC,CAAD,CAAtB;AAEP,OAAO,MAAMG,IAAI,GAAGf,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,MAAMgB,MAAM,GAAGJ,QAAQ,CAAC,EAAD,CAAvB;AAEP,OAAO,MAAMK,IAAI,GAAGjB,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,MAAMkB,MAAM,GAAGN,QAAQ,CAAC,EAAD,CAAvB;AAEP,OAAO,MAAMO,IAAI,GAAGnB,MAAM,CAAC,EAAD,CAAnB;AAEP,OAAO,MAAMoB,MAAM,GAAGR,QAAQ,CAAC,EAAD,CAAvB","names":["blob","toBigIntBE","toBigIntLE","toBufferBE","toBufferLE","encodeDecode","bigInt","length","property","layout","encode","decode","bigIntLayout","buffer","offset","src","Buffer","from","bigIntBE","u64","u64be","u128","u128be","u192","u192be","u256","u256be"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/buffer-layout-utils/src/bigint.ts"],"sourcesContent":["import { blob, Layout } from '@solana/buffer-layout';\nimport { toBigIntBE, toBigIntLE, toBufferBE, toBufferLE } from 'bigint-buffer';\nimport { encodeDecode } from './base';\n\nexport const bigInt =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntLE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferLE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const bigIntBE =\n    (length: number) =>\n    (property?: string): Layout<bigint> => {\n        const layout = blob(length, property);\n        const { encode, decode } = encodeDecode(layout);\n\n        const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n        bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n            const src = decode(buffer, offset);\n            return toBigIntBE(Buffer.from(src));\n        };\n\n        bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n            const src = toBufferBE(bigInt, length);\n            return encode(src, buffer, offset);\n        };\n\n        return bigIntLayout;\n    };\n\nexport const u64 = bigInt(8);\n\nexport const u64be = bigIntBE(8);\n\nexport const u128 = bigInt(16);\n\nexport const u128be = bigIntBE(16);\n\nexport const u192 = bigInt(24);\n\nexport const u192be = bigIntBE(24);\n\nexport const u256 = bigInt(32);\n\nexport const u256be = bigIntBE(32);\n"]},"metadata":{},"sourceType":"module"}