{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const closeAccountInstructionData = struct([u8('instruction')]);\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createCloseAccountInstruction(account, destination, authority) {\n  let multiSigners = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(closeAccountInstructionData.span);\n  closeAccountInstructionData.encode({\n    instruction: TokenInstruction.CloseAccount\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeCloseAccountInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeCloseAccountInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n  if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeCloseAccountInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, destination, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: closeAccountInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,EAAjB,QAA2B,uBAA3B;AACA,SAAyCC,sBAAzC,QAAuE,iBAAvE;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACIC,gCADJ,EAEIC,gCAFJ,EAGIC,mCAHJ,EAIIC,gCAJJ,QAKO,iBALP;AAMA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAOA;;AACA,OAAO,MAAMC,2BAA2B,GAAGV,MAAM,CAA8B,CAACC,EAAE,CAAC,aAAD,CAAH,CAA9B,CAA1C;AAEP;;;;;;;;;;;;AAWA,OAAM,SAAUU,6BAAV,CACFC,OADE,EAEFC,WAFE,EAGFC,SAHE,EAK0B;EAAA,IAD5BC,YAC4B,uEADH,EACG;EAAA,IAA5BC,SAA4B,uEAAhBb,gBAAgB;EAE5B,MAAMc,IAAI,GAAGT,UAAU,CACnB,CACI;IAAEU,MAAM,EAAEN,OAAV;IAAmBO,QAAQ,EAAE,KAA7B;IAAoCC,UAAU,EAAE;EAAhD,CADJ,EAEI;IAAEF,MAAM,EAAEL,WAAV;IAAuBM,QAAQ,EAAE,KAAjC;IAAwCC,UAAU,EAAE;EAApD,CAFJ,CADmB,EAKnBN,SALmB,EAMnBC,YANmB,CAAvB;EASA,MAAMM,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAab,2BAA2B,CAACc,IAAzC,CAAb;EACAd,2BAA2B,CAACe,MAA5B,CAAmC;IAAEC,WAAW,EAAEjB,gBAAgB,CAACkB;EAAhC,CAAnC,EAAmFN,IAAnF;EAEA,OAAO,IAAInB,sBAAJ,CAA2B;IAAEe,IAAF;IAAQD,SAAR;IAAmBK;EAAnB,CAA3B,CAAP;AACH;AAgBD;;;;;;;;;AAQA,OAAM,SAAUO,6BAAV,CACFF,WADE,EAE0B;EAAA,IAA5BV,SAA4B,uEAAhBb,gBAAgB;EAE5B,IAAI,CAACuB,WAAW,CAACV,SAAZ,CAAsBa,MAAtB,CAA6Bb,SAA7B,CAAL,EAA8C,MAAM,IAAIV,mCAAJ,EAAN;EAC9C,IAAIoB,WAAW,CAACL,IAAZ,CAAiBS,MAAjB,KAA4BpB,2BAA2B,CAACc,IAA5D,EAAkE,MAAM,IAAIpB,gCAAJ,EAAN;EAElE,MAAM;IACFa,IAAI,EAAE;MAAEL,OAAF;MAAWC,WAAX;MAAwBC,SAAxB;MAAmCC;IAAnC,CADJ;IAEFM;EAFE,IAGFU,sCAAsC,CAACL,WAAD,CAH1C;EAIA,IAAIL,IAAI,CAACK,WAAL,KAAqBjB,gBAAgB,CAACkB,YAA1C,EAAwD,MAAM,IAAIpB,gCAAJ,EAAN;EACxD,IAAI,CAACK,OAAD,IAAY,CAACC,WAAb,IAA4B,CAACC,SAAjC,EAA4C,MAAM,IAAIT,gCAAJ,EAAN,CAVhB,CAY5B;;EAEA,OAAO;IACHW,SADG;IAEHC,IAAI,EAAE;MACFL,OADE;MAEFC,WAFE;MAGFC,SAHE;MAIFC;IAJE,CAFH;IAQHM;EARG,CAAP;AAUH;AAgBD;;;;;;;;AAOA,OAAM,SAAUU,sCAAV,OAImB;EAAA,IAJ8B;IACnDf,SADmD;IAEnDC,IAAI,EAAE,CAACL,OAAD,EAAUC,WAAV,EAAuBC,SAAvB,EAAkC,GAAGC,YAArC,CAF6C;IAGnDM;EAHmD,CAI9B;EACrB,OAAO;IACHL,SADG;IAEHC,IAAI,EAAE;MACFL,OADE;MAEFC,WAFE;MAGFC,SAHE;MAIFC;IAJE,CAFH;IAQHM,IAAI,EAAEX,2BAA2B,CAACsB,MAA5B,CAAmCX,IAAnC;EARH,CAAP;AAUH","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","closeAccountInstructionData","createCloseAccountInstruction","account","destination","authority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","CloseAccount","decodeCloseAccountInstruction","equals","length","decodeCloseAccountInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/closeAccount.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface CloseAccountInstructionData {\n    instruction: TokenInstruction.CloseAccount;\n}\n\n/** TODO: docs */\nexport const closeAccountInstructionData = struct<CloseAccountInstructionData>([u8('instruction')]);\n\n/**\n * Construct a CloseAccount instruction\n *\n * @param account      Account to close\n * @param destination  Account to receive the remaining balance of the closed account\n * @param authority    Account close authority\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createCloseAccountInstruction(\n    account: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(closeAccountInstructionData.span);\n    closeAccountInstructionData.encode({ instruction: TokenInstruction.CloseAccount }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid CloseAccount instruction */\nexport interface DecodedCloseAccountInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.CloseAccount;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeCloseAccountInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedCloseAccountInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== closeAccountInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, destination, authority, multiSigners },\n        data,\n    } = decodeCloseAccountInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.CloseAccount) throw new TokenInvalidInstructionTypeError();\n    if (!account || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated CloseAccount instruction */\nexport interface DecodedCloseAccountInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a CloseAccount instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeCloseAccountInstructionUnchecked({\n    programId,\n    keys: [account, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedCloseAccountInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: closeAccountInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}