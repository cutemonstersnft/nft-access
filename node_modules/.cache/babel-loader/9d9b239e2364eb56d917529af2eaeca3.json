{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** Authority types defined by the program */\n\nexport var AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"MintTokens\"] = 0] = \"MintTokens\";\n  AuthorityType[AuthorityType[\"FreezeAccount\"] = 1] = \"FreezeAccount\";\n  AuthorityType[AuthorityType[\"AccountOwner\"] = 2] = \"AccountOwner\";\n  AuthorityType[AuthorityType[\"CloseAccount\"] = 3] = \"CloseAccount\";\n})(AuthorityType || (AuthorityType = {}));\n/** TODO: docs */\n\n\nexport const setAuthorityInstructionData = struct([u8('instruction'), u8('authorityType'), u8('newAuthorityOption'), publicKey('newAuthority')]);\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createSetAuthorityInstruction(account, currentAuthority, authorityType, newAuthority) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }], currentAuthority, multiSigners);\n  const data = Buffer.alloc(setAuthorityInstructionData.span);\n  setAuthorityInstructionData.encode({\n    instruction: TokenInstruction.SetAuthority,\n    authorityType,\n    newAuthorityOption: newAuthority ? 1 : 0,\n    newAuthority: newAuthority || new PublicKey(0)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeSetAuthorityInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  } = decodeSetAuthorityInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n  if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeSetAuthorityInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data\n  } = _ref;\n  const {\n    instruction,\n    authorityType,\n    newAuthorityOption,\n    newAuthority\n  } = setAuthorityInstructionData.decode(data);\n  return {\n    programId,\n    keys: {\n      account,\n      currentAuthority,\n      multiSigners\n    },\n    data: {\n      instruction,\n      authorityType,\n      newAuthority: newAuthorityOption ? newAuthority : null\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","publicKey","PublicKey","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","AuthorityType","setAuthorityInstructionData","createSetAuthorityInstruction","account","currentAuthority","authorityType","newAuthority","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","SetAuthority","newAuthorityOption","decodeSetAuthorityInstruction","equals","length","decodeSetAuthorityInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/setAuthority.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { publicKey } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** Authority types defined by the program */\nexport enum AuthorityType {\n    MintTokens = 0,\n    FreezeAccount = 1,\n    AccountOwner = 2,\n    CloseAccount = 3,\n}\n\n/** TODO: docs */\nexport interface SetAuthorityInstructionData {\n    instruction: TokenInstruction.SetAuthority;\n    authorityType: AuthorityType;\n    newAuthorityOption: 1 | 0;\n    newAuthority: PublicKey;\n}\n\n/** TODO: docs */\nexport const setAuthorityInstructionData = struct<SetAuthorityInstructionData>([\n    u8('instruction'),\n    u8('authorityType'),\n    u8('newAuthorityOption'),\n    publicKey('newAuthority'),\n]);\n\n/**\n * Construct a SetAuthority instruction\n *\n * @param account          Address of the token account\n * @param currentAuthority Current authority of the specified type\n * @param authorityType    Type of authority to set\n * @param newAuthority     New authority of the account\n * @param multiSigners     Signing accounts if `currentAuthority` is a multisig\n * @param programId        SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSetAuthorityInstruction(\n    account: PublicKey,\n    currentAuthority: PublicKey,\n    authorityType: AuthorityType,\n    newAuthority: PublicKey | null,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners([{ pubkey: account, isSigner: false, isWritable: true }], currentAuthority, multiSigners);\n\n    const data = Buffer.alloc(setAuthorityInstructionData.span);\n    setAuthorityInstructionData.encode(\n        {\n            instruction: TokenInstruction.SetAuthority,\n            authorityType,\n            newAuthorityOption: newAuthority ? 1 : 0,\n            newAuthority: newAuthority || new PublicKey(0),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SetAuthority instruction */\nexport interface DecodedSetAuthorityInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        currentAuthority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.SetAuthority;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSetAuthorityInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSetAuthorityInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== setAuthorityInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, currentAuthority, multiSigners },\n        data,\n    } = decodeSetAuthorityInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SetAuthority) throw new TokenInvalidInstructionTypeError();\n    if (!account || !currentAuthority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SetAuthority instruction */\nexport interface DecodedSetAuthorityInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        currentAuthority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        authorityType: AuthorityType;\n        newAuthority: PublicKey | null;\n    };\n}\n\n/**\n * Decode a SetAuthority instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSetAuthorityInstructionUnchecked({\n    programId,\n    keys: [account, currentAuthority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedSetAuthorityInstructionUnchecked {\n    const { instruction, authorityType, newAuthorityOption, newAuthority } = setAuthorityInstructionData.decode(data);\n\n    return {\n        programId,\n        keys: {\n            account,\n            currentAuthority,\n            multiSigners,\n        },\n        data: {\n            instruction,\n            authorityType,\n            newAuthority: newAuthorityOption ? newAuthority : null,\n        },\n    };\n}\n"]},"metadata":{},"sourceType":"module"}