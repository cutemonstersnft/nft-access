{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const syncNativeInstructionData = struct([u8('instruction')]);\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createSyncNativeInstruction(account) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }];\n  const data = Buffer.alloc(syncNativeInstructionData.span);\n  syncNativeInstructionData.encode({\n    instruction: TokenInstruction.SyncNative\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeSyncNativeInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account\n    },\n    data\n  } = decodeSyncNativeInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n  if (!account) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data\n  };\n}\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeSyncNativeInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account\n    },\n    data: syncNativeInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,EAAjB,QAA2B,uBAA3B;AACA,SAAiCC,sBAAjC,QAA+D,iBAA/D;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACIC,gCADJ,EAEIC,gCAFJ,EAGIC,mCAHJ,EAIIC,gCAJJ,QAKO,iBALP;AAMA,SAASC,gBAAT,QAAiC,aAAjC;AAOA;;AACA,OAAO,MAAMC,yBAAyB,GAAGT,MAAM,CAA4B,CAACC,EAAE,CAAC,aAAD,CAAH,CAA5B,CAAxC;AAEP;;;;;;;;;AAQA,OAAM,SAAUS,2BAAV,CAAsCC,OAAtC,EAAsF;EAAA,IAA5BC,SAA4B,uEAAhBT,gBAAgB;EACxF,MAAMU,IAAI,GAAG,CAAC;IAAEC,MAAM,EAAEH,OAAV;IAAmBI,QAAQ,EAAE,KAA7B;IAAoCC,UAAU,EAAE;EAAhD,CAAD,CAAb;EAEA,MAAMC,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaV,yBAAyB,CAACW,IAAvC,CAAb;EACAX,yBAAyB,CAACY,MAA1B,CAAiC;IAAEC,WAAW,EAAEd,gBAAgB,CAACe;EAAhC,CAAjC,EAA+EN,IAA/E;EAEA,OAAO,IAAIf,sBAAJ,CAA2B;IAAEW,IAAF;IAAQD,SAAR;IAAmBK;EAAnB,CAA3B,CAAP;AACH;AAaD;;;;;;;;;AAQA,OAAM,SAAUO,2BAAV,CACFF,WADE,EAE0B;EAAA,IAA5BV,SAA4B,uEAAhBT,gBAAgB;EAE5B,IAAI,CAACmB,WAAW,CAACV,SAAZ,CAAsBa,MAAtB,CAA6Bb,SAA7B,CAAL,EAA8C,MAAM,IAAIN,mCAAJ,EAAN;EAC9C,IAAIgB,WAAW,CAACL,IAAZ,CAAiBS,MAAjB,KAA4BjB,yBAAyB,CAACW,IAA1D,EAAgE,MAAM,IAAIhB,gCAAJ,EAAN;EAEhE,MAAM;IACFS,IAAI,EAAE;MAAEF;IAAF,CADJ;IAEFM;EAFE,IAGFU,oCAAoC,CAACL,WAAD,CAHxC;EAIA,IAAIL,IAAI,CAACK,WAAL,KAAqBd,gBAAgB,CAACe,UAA1C,EAAsD,MAAM,IAAIhB,gCAAJ,EAAN;EACtD,IAAI,CAACI,OAAL,EAAc,MAAM,IAAIN,gCAAJ,EAAN,CAVc,CAY5B;;EAEA,OAAO;IACHO,SADG;IAEHC,IAAI,EAAE;MACFF;IADE,CAFH;IAKHM;EALG,CAAP;AAOH;AAaD;;;;;;;;AAOA,OAAM,SAAUU,oCAAV,OAImB;EAAA,IAJ4B;IACjDf,SADiD;IAEjDC,IAAI,EAAE,CAACF,OAAD,CAF2C;IAGjDM;EAHiD,CAI5B;EACrB,OAAO;IACHL,SADG;IAEHC,IAAI,EAAE;MACFF;IADE,CAFH;IAKHM,IAAI,EAAER,yBAAyB,CAACmB,MAA1B,CAAiCX,IAAjC;EALH,CAAP;AAOH","names":["struct","u8","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","syncNativeInstructionData","createSyncNativeInstruction","account","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","SyncNative","decodeSyncNativeInstruction","equals","length","decodeSyncNativeInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/syncNative.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface SyncNativeInstructionData {\n    instruction: TokenInstruction.SyncNative;\n}\n\n/** TODO: docs */\nexport const syncNativeInstructionData = struct<SyncNativeInstructionData>([u8('instruction')]);\n\n/**\n * Construct a SyncNative instruction\n *\n * @param account   Native account to sync lamports from\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createSyncNativeInstruction(account: PublicKey, programId = TOKEN_PROGRAM_ID): TransactionInstruction {\n    const keys = [{ pubkey: account, isSigner: false, isWritable: true }];\n\n    const data = Buffer.alloc(syncNativeInstructionData.span);\n    syncNativeInstructionData.encode({ instruction: TokenInstruction.SyncNative }, data);\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid SyncNative instruction */\nexport interface DecodedSyncNativeInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n    };\n    data: {\n        instruction: TokenInstruction.SyncNative;\n    };\n}\n\n/**\n * Decode a SyncNative instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeSyncNativeInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedSyncNativeInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== syncNativeInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account },\n        data,\n    } = decodeSyncNativeInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.SyncNative) throw new TokenInvalidInstructionTypeError();\n    if (!account) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated SyncNative instruction */\nexport interface DecodedSyncNativeInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n    };\n    data: {\n        instruction: number;\n    };\n}\n\n/**\n * Decode a SyncNative instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeSyncNativeInstructionUnchecked({\n    programId,\n    keys: [account],\n    data,\n}: TransactionInstruction): DecodedSyncNativeInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n        },\n        data: syncNativeInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}