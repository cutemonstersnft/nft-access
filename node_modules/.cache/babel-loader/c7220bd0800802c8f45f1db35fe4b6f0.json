{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const approveInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createApproveInstruction(account, delegate, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: delegate,\n    isSigner: false,\n    isWritable: false\n  }], owner, multiSigners);\n  const data = Buffer.alloc(approveInstructionData.span);\n  approveInstructionData.encode({\n    instruction: TokenInstruction.Approve,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeApproveInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== approveInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeApproveInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Approve) throw new TokenInvalidInstructionTypeError();\n  if (!account || !delegate || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeApproveInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      delegate,\n      owner,\n      multiSigners\n    },\n    data: approveInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","approveInstructionData","createApproveInstruction","account","delegate","owner","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Approve","BigInt","decodeApproveInstruction","equals","length","decodeApproveInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/approve.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface ApproveInstructionData {\n    instruction: TokenInstruction.Approve;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const approveInstructionData = struct<ApproveInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct an Approve instruction\n *\n * @param account      Account to set the delegate for\n * @param delegate     Account authorized to transfer tokens from the account\n * @param owner        Owner of the account\n * @param amount       Maximum number of tokens the delegate may transfer\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createApproveInstruction(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(approveInstructionData.span);\n    approveInstructionData.encode(\n        {\n            instruction: TokenInstruction.Approve,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Approve instruction */\nexport interface DecodedApproveInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        delegate: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Approve;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeApproveInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedApproveInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, delegate, owner, multiSigners },\n        data,\n    } = decodeApproveInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Approve) throw new TokenInvalidInstructionTypeError();\n    if (!account || !delegate || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Approve instruction */\nexport interface DecodedApproveInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        delegate: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode an Approve instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeApproveInstructionUnchecked({\n    programId,\n    keys: [account, delegate, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedApproveInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            delegate,\n            owner,\n            multiSigners,\n        },\n        data: approveInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}