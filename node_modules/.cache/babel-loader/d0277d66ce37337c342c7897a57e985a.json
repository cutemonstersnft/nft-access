{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createAssociatedTokenAccountInstruction } from './../instructions/index.mjs';\nimport { getAssociatedTokenAddress } from './../state/index.mjs';\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\n\nexport async function createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions) {\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ASSOCIATED_TOKEN_PROGRAM_ID;\n  const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n  const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n  await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n  return associatedToken;\n}","map":{"version":3,"mappings":"AAAA,SAAgDA,yBAAhD,EAAmFC,WAAnF,QAAsG,iBAAtG;AACA,SAASC,2BAAT,EAAsCC,gBAAtC,QAA8D,oBAA9D;AACA,SAASC,uCAAT,QAAwD,6BAAxD;AACA,SAASC,yBAAT,QAA0C,sBAA1C;AAEA;;;;;;;;;;;;;;AAaA,OAAO,eAAeC,4BAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,IAHG,EAIHC,KAJG,EAKHC,cALG,EAOmD;EAAA,IADtDC,SACsD,uEAD1CT,gBAC0C;EAAA,IAAtDU,wBAAsD,uEAA3BX,2BAA2B;EAEtD,MAAMY,eAAe,GAAG,MAAMT,yBAAyB,CAACI,IAAD,EAAOC,KAAP,EAAc,KAAd,EAAqBE,SAArB,EAAgCC,wBAAhC,CAAvD;EAEA,MAAME,WAAW,GAAG,IAAId,WAAJ,GAAkBe,GAAlB,CAChBZ,uCAAuC,CACnCI,KAAK,CAACS,SAD6B,EAEnCH,eAFmC,EAGnCJ,KAHmC,EAInCD,IAJmC,EAKnCG,SALmC,EAMnCC,wBANmC,CADvB,CAApB;EAWA,MAAMb,yBAAyB,CAACO,UAAD,EAAaQ,WAAb,EAA0B,CAACP,KAAD,CAA1B,EAAmCG,cAAnC,CAA/B;EAEA,OAAOG,eAAP;AACH","names":["sendAndConfirmTransaction","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","getAssociatedTokenAddress","createAssociatedTokenAccount","connection","payer","mint","owner","confirmOptions","programId","associatedTokenProgramId","associatedToken","transaction","add","publicKey"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/createAssociatedTokenAccount.ts"],"sourcesContent":["import { ConfirmOptions, Connection, PublicKey, sendAndConfirmTransaction, Signer, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants';\nimport { createAssociatedTokenAccountInstruction } from '../instructions/index';\nimport { getAssociatedTokenAddress } from '../state/index';\n\n/**\n * Create and initialize a new associated token account\n *\n * @param connection               Connection to use\n * @param payer                    Payer of the transaction and initialization fees\n * @param mint                     Mint for the account\n * @param owner                    Owner of the new account\n * @param confirmOptions           Options for confirming the transaction\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Address of the new associated token account\n */\nexport async function createAssociatedTokenAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const associatedToken = await getAssociatedTokenAddress(mint, owner, false, programId, associatedTokenProgramId);\n\n    const transaction = new Transaction().add(\n        createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedToken,\n            owner,\n            mint,\n            programId,\n            associatedTokenProgramId\n        )\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n    return associatedToken;\n}\n"]},"metadata":{},"sourceType":"module"}