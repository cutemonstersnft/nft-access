{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { HTTPS_PROTOCOL, SOLANA_PROTOCOL } from './constants.mjs';\n/**\n * Thrown when a URL can't be parsed as a Solana Pay URL.\n */\n\nexport class ParseURLError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'ParseURLError';\n  }\n\n}\n/**\n * Parse a Solana Pay URL.\n *\n * @param url - URL to parse.\n *\n * @throws {ParseURLError}\n */\n\nexport function parseURL(url) {\n  if (typeof url === 'string') {\n    if (url.length > 2048) throw new ParseURLError('length invalid');\n    url = new URL(url);\n  }\n\n  if (url.protocol !== SOLANA_PROTOCOL) throw new ParseURLError('protocol invalid');\n  if (!url.pathname) throw new ParseURLError('pathname missing');\n  return /[:%]/.test(url.pathname) ? parseTransactionRequestURL(url) : parseTransferRequestURL(url);\n}\n\nfunction parseTransactionRequestURL(_ref) {\n  let {\n    pathname,\n    searchParams\n  } = _ref;\n  const link = new URL(decodeURIComponent(pathname));\n  if (link.protocol !== HTTPS_PROTOCOL) throw new ParseURLError('link invalid');\n  const label = searchParams.get('label') || undefined;\n  const message = searchParams.get('message') || undefined;\n  return {\n    link,\n    label,\n    message\n  };\n}\n\nfunction parseTransferRequestURL(_ref2) {\n  let {\n    pathname,\n    searchParams\n  } = _ref2;\n  let recipient;\n\n  try {\n    recipient = new PublicKey(pathname);\n  } catch (error) {\n    throw new ParseURLError('recipient invalid');\n  }\n\n  let amount;\n  const amountParam = searchParams.get('amount');\n\n  if (amountParam != null) {\n    if (!/^\\d+(\\.\\d+)?$/.test(amountParam)) throw new ParseURLError('amount invalid');\n    amount = new BigNumber(amountParam);\n    if (amount.isNaN()) throw new ParseURLError('amount NaN');\n    if (amount.isNegative()) throw new ParseURLError('amount negative');\n  }\n\n  let splToken;\n  const splTokenParam = searchParams.get('spl-token');\n\n  if (splTokenParam != null) {\n    try {\n      splToken = new PublicKey(splTokenParam);\n    } catch (error) {\n      throw new ParseURLError('spl-token invalid');\n    }\n  }\n\n  let reference;\n  const referenceParams = searchParams.getAll('reference');\n\n  if (referenceParams.length) {\n    try {\n      reference = referenceParams.map(reference => new PublicKey(reference));\n    } catch (error) {\n      throw new ParseURLError('reference invalid');\n    }\n  }\n\n  const label = searchParams.get('label') || undefined;\n  const message = searchParams.get('message') || undefined;\n  const memo = searchParams.get('memo') || undefined;\n  return {\n    recipient,\n    amount,\n    splToken,\n    reference,\n    label,\n    message,\n    memo\n  };\n}","map":{"version":3,"mappings":"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","names":["PublicKey","BigNumber","HTTPS_PROTOCOL","SOLANA_PROTOCOL","ParseURLError","Error","constructor","parseURL","url","length","URL","protocol","pathname","test","parseTransactionRequestURL","parseTransferRequestURL","searchParams","link","decodeURIComponent","label","get","undefined","message","recipient","error","amount","amountParam","isNaN","isNegative","splToken","splTokenParam","reference","referenceParams","getAll","map","memo"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/pay/src/parseURL.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { HTTPS_PROTOCOL, SOLANA_PROTOCOL } from './constants';\nimport { Amount, Label, Link, Memo, Message, Recipient, Reference, SPLToken } from './types';\n\n/**\n * A Solana Pay transaction request URL.\n */\nexport interface TransactionRequestURL {\n    /** `link` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#link). */\n    link: Link;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label-1). */\n    label: Label | undefined;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message-1). */\n    message: Message | undefined;\n}\n\n/**\n * A Solana Pay transfer request URL.\n */\nexport interface TransferRequestURL {\n    /** `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient). */\n    recipient: Recipient;\n    /** `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount). */\n    amount: Amount | undefined;\n    /** `spl-token` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token). */\n    splToken: SPLToken | undefined;\n    /** `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference). */\n    reference: Reference[] | undefined;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label). */\n    label: Label | undefined;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message). */\n    message: Message | undefined;\n    /** `memo` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#memo). */\n    memo: Memo | undefined;\n}\n\n/**\n * Thrown when a URL can't be parsed as a Solana Pay URL.\n */\nexport class ParseURLError extends Error {\n    name = 'ParseURLError';\n}\n\n/**\n * Parse a Solana Pay URL.\n *\n * @param url - URL to parse.\n *\n * @throws {ParseURLError}\n */\nexport function parseURL(url: string | URL): TransactionRequestURL | TransferRequestURL {\n    if (typeof url === 'string') {\n        if (url.length > 2048) throw new ParseURLError('length invalid');\n        url = new URL(url);\n    }\n\n    if (url.protocol !== SOLANA_PROTOCOL) throw new ParseURLError('protocol invalid');\n    if (!url.pathname) throw new ParseURLError('pathname missing');\n\n    return /[:%]/.test(url.pathname) ? parseTransactionRequestURL(url) : parseTransferRequestURL(url);\n}\n\nfunction parseTransactionRequestURL({ pathname, searchParams }: URL): TransactionRequestURL {\n    const link = new URL(decodeURIComponent(pathname));\n    if (link.protocol !== HTTPS_PROTOCOL) throw new ParseURLError('link invalid');\n\n    const label = searchParams.get('label') || undefined;\n    const message = searchParams.get('message') || undefined;\n\n    return {\n        link,\n        label,\n        message,\n    };\n}\n\nfunction parseTransferRequestURL({ pathname, searchParams }: URL): TransferRequestURL {\n    let recipient: PublicKey;\n    try {\n        recipient = new PublicKey(pathname);\n    } catch (error: any) {\n        throw new ParseURLError('recipient invalid');\n    }\n\n    let amount: BigNumber | undefined;\n    const amountParam = searchParams.get('amount');\n    if (amountParam != null) {\n        if (!/^\\d+(\\.\\d+)?$/.test(amountParam)) throw new ParseURLError('amount invalid');\n\n        amount = new BigNumber(amountParam);\n        if (amount.isNaN()) throw new ParseURLError('amount NaN');\n        if (amount.isNegative()) throw new ParseURLError('amount negative');\n    }\n\n    let splToken: PublicKey | undefined;\n    const splTokenParam = searchParams.get('spl-token');\n    if (splTokenParam != null) {\n        try {\n            splToken = new PublicKey(splTokenParam);\n        } catch (error) {\n            throw new ParseURLError('spl-token invalid');\n        }\n    }\n\n    let reference: PublicKey[] | undefined;\n    const referenceParams = searchParams.getAll('reference');\n    if (referenceParams.length) {\n        try {\n            reference = referenceParams.map((reference) => new PublicKey(reference));\n        } catch (error) {\n            throw new ParseURLError('reference invalid');\n        }\n    }\n\n    const label = searchParams.get('label') || undefined;\n    const message = searchParams.get('message') || undefined;\n    const memo = searchParams.get('memo') || undefined;\n\n    return {\n        recipient,\n        amount,\n        splToken,\n        reference,\n        label,\n        message,\n        memo,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}