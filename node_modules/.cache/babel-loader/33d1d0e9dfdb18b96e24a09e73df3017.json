{"ast":null,"code":"/** Base class for errors */\nexport class TokenError extends Error {\n  constructor(message) {\n    super(message);\n  }\n\n}\n/** Thrown if an account is not found at the expected address */\n\nexport class TokenAccountNotFoundError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenAccountNotFoundError';\n  }\n\n}\n/** Thrown if a program state account is not owned by the expected token program */\n\nexport class TokenInvalidAccountOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountOwnerError';\n  }\n\n}\n/** Thrown if the byte length of an program state account doesn't match the expected size */\n\nexport class TokenInvalidAccountSizeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidAccountSizeError';\n  }\n\n}\n/** Thrown if the mint of a token account doesn't match the expected mint */\n\nexport class TokenInvalidMintError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidMintError';\n  }\n\n}\n/** Thrown if the owner of a token account doesn't match the expected owner */\n\nexport class TokenInvalidOwnerError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidOwnerError';\n  }\n\n}\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\n\nexport class TokenOwnerOffCurveError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenOwnerOffCurveError';\n  }\n\n}\n/** Thrown if an instruction's program is invalid */\n\nexport class TokenInvalidInstructionProgramError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionProgramError';\n  }\n\n}\n/** Thrown if an instruction's keys are invalid */\n\nexport class TokenInvalidInstructionKeysError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionKeysError';\n  }\n\n}\n/** Thrown if an instruction's data is invalid */\n\nexport class TokenInvalidInstructionDataError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionDataError';\n  }\n\n}\n/** Thrown if an instruction's type is invalid */\n\nexport class TokenInvalidInstructionTypeError extends TokenError {\n  constructor() {\n    super(...arguments);\n    this.name = 'TokenInvalidInstructionTypeError';\n  }\n\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAM,MAAgBA,UAAhB,SAAmCC,KAAnC,CAAwC;EAC1CC,YAAYC,OAAZ,EAA4B;IACxB,MAAMA,OAAN;EACH;;AAHyC;AAM9C;;AACA,OAAM,MAAOC,yBAAP,SAAyCJ,UAAzC,CAAmD;EAAzDE;;IACI,YAAO,2BAAP;EACH;;AAFwD;AAIzD;;AACA,OAAM,MAAOG,6BAAP,SAA6CL,UAA7C,CAAuD;EAA7DE;;IACI,YAAO,+BAAP;EACH;;AAF4D;AAI7D;;AACA,OAAM,MAAOI,4BAAP,SAA4CN,UAA5C,CAAsD;EAA5DE;;IACI,YAAO,8BAAP;EACH;;AAF2D;AAI5D;;AACA,OAAM,MAAOK,qBAAP,SAAqCP,UAArC,CAA+C;EAArDE;;IACI,YAAO,uBAAP;EACH;;AAFoD;AAIrD;;AACA,OAAM,MAAOM,sBAAP,SAAsCR,UAAtC,CAAgD;EAAtDE;;IACI,YAAO,wBAAP;EACH;;AAFqD;AAItD;;AACA,OAAM,MAAOO,uBAAP,SAAuCT,UAAvC,CAAiD;EAAvDE;;IACI,YAAO,yBAAP;EACH;;AAFsD;AAIvD;;AACA,OAAM,MAAOQ,mCAAP,SAAmDV,UAAnD,CAA6D;EAAnEE;;IACI,YAAO,qCAAP;EACH;;AAFkE;AAInE;;AACA,OAAM,MAAOS,gCAAP,SAAgDX,UAAhD,CAA0D;EAAhEE;;IACI,YAAO,kCAAP;EACH;;AAF+D;AAIhE;;AACA,OAAM,MAAOU,gCAAP,SAAgDZ,UAAhD,CAA0D;EAAhEE;;IACI,YAAO,kCAAP;EACH;;AAF+D;AAIhE;;AACA,OAAM,MAAOW,gCAAP,SAAgDb,UAAhD,CAA0D;EAAhEE;;IACI,YAAO,kCAAP;EACH;;AAF+D","names":["TokenError","Error","constructor","message","TokenAccountNotFoundError","TokenInvalidAccountOwnerError","TokenInvalidAccountSizeError","TokenInvalidMintError","TokenInvalidOwnerError","TokenOwnerOffCurveError","TokenInvalidInstructionProgramError","TokenInvalidInstructionKeysError","TokenInvalidInstructionDataError","TokenInvalidInstructionTypeError"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/errors.ts"],"sourcesContent":["/** Base class for errors */\nexport abstract class TokenError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\n/** Thrown if an account is not found at the expected address */\nexport class TokenAccountNotFoundError extends TokenError {\n    name = 'TokenAccountNotFoundError';\n}\n\n/** Thrown if a program state account is not owned by the expected token program */\nexport class TokenInvalidAccountOwnerError extends TokenError {\n    name = 'TokenInvalidAccountOwnerError';\n}\n\n/** Thrown if the byte length of an program state account doesn't match the expected size */\nexport class TokenInvalidAccountSizeError extends TokenError {\n    name = 'TokenInvalidAccountSizeError';\n}\n\n/** Thrown if the mint of a token account doesn't match the expected mint */\nexport class TokenInvalidMintError extends TokenError {\n    name = 'TokenInvalidMintError';\n}\n\n/** Thrown if the owner of a token account doesn't match the expected owner */\nexport class TokenInvalidOwnerError extends TokenError {\n    name = 'TokenInvalidOwnerError';\n}\n\n/** Thrown if the owner of a token account is a PDA (Program Derived Address) */\nexport class TokenOwnerOffCurveError extends TokenError {\n    name = 'TokenOwnerOffCurveError';\n}\n\n/** Thrown if an instruction's program is invalid */\nexport class TokenInvalidInstructionProgramError extends TokenError {\n    name = 'TokenInvalidInstructionProgramError';\n}\n\n/** Thrown if an instruction's keys are invalid */\nexport class TokenInvalidInstructionKeysError extends TokenError {\n    name = 'TokenInvalidInstructionKeysError';\n}\n\n/** Thrown if an instruction's data is invalid */\nexport class TokenInvalidInstructionDataError extends TokenError {\n    name = 'TokenInvalidInstructionDataError';\n}\n\n/** Thrown if an instruction's type is invalid */\nexport class TokenInvalidInstructionTypeError extends TokenError {\n    name = 'TokenInvalidInstructionTypeError';\n}\n"]},"metadata":{},"sourceType":"module"}