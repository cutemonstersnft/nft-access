{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const transferCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createTransferCheckedInstruction(source, mint, destination, owner, amount, decimals) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(transferCheckedInstructionData.span);\n  transferCheckedInstructionData.encode({\n    instruction: TokenInstruction.TransferChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeTransferCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeTransferCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n  if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeTransferCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      source,\n      mint,\n      destination,\n      owner,\n      multiSigners\n    },\n    data: transferCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","transferCheckedInstructionData","createTransferCheckedInstruction","source","mint","destination","owner","amount","decimals","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","TransferChecked","BigInt","decodeTransferCheckedInstruction","equals","length","decodeTransferCheckedInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/transferChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface TransferCheckedInstructionData {\n    instruction: TokenInstruction.TransferChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const transferCheckedInstructionData = struct<TransferCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a TransferChecked instruction\n *\n * @param source       Source account\n * @param mint         Mint account\n * @param destination  Destination account\n * @param owner        Owner of the source account\n * @param amount       Number of tokens to transfer\n * @param decimals     Number of decimals in transfer amount\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createTransferCheckedInstruction(\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: source, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(transferCheckedInstructionData.span);\n    transferCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.TransferChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid TransferChecked instruction */\nexport interface DecodedTransferCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta;\n        mint: AccountMeta;\n        destination: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.TransferChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeTransferCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedTransferCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== transferCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { source, mint, destination, owner, multiSigners },\n        data,\n    } = decodeTransferCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.TransferChecked) throw new TokenInvalidInstructionTypeError();\n    if (!source || !mint || !destination || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated TransferChecked instruction */\nexport interface DecodedTransferCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        source: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a TransferChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeTransferCheckedInstructionUnchecked({\n    programId,\n    keys: [source, mint, destination, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedTransferCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            source,\n            mint,\n            destination,\n            owner,\n            multiSigners,\n        },\n        data: transferCheckedInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}