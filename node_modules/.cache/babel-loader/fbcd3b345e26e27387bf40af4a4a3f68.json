{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const initializeMultisigInstructionData = struct([u8('instruction'), u8('m')]);\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createInitializeMultisigInstruction(account, signers, m) {\n  let programId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n\n  for (const signer of signers) {\n    keys.push({\n      pubkey: signer,\n      isSigner: false,\n      isWritable: false\n    });\n  }\n\n  const data = Buffer.alloc(initializeMultisigInstructionData.span);\n  initializeMultisigInstructionData.encode({\n    instruction: TokenInstruction.InitializeMultisig,\n    m\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeInitializeMultisigInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== initializeMultisigInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  } = decodeInitializeMultisigInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n  if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data\n  };\n}\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeInitializeMultisigInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, rent, ...signers],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      rent,\n      signers\n    },\n    data: initializeMultisigInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,EAAiBC,EAAjB,QAA2B,uBAA3B;AACA,SAAiCC,kBAAjC,EAAqDC,sBAArD,QAAmF,iBAAnF;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SACIC,gCADJ,EAEIC,gCAFJ,EAGIC,mCAHJ,EAIIC,gCAJJ,QAKO,iBALP;AAMA,SAASC,gBAAT,QAAiC,aAAjC;AAQA;;AACA,OAAO,MAAMC,iCAAiC,GAAGV,MAAM,CAAoC,CACvFC,EAAE,CAAC,aAAD,CADqF,EAEvFA,EAAE,CAAC,GAAD,CAFqF,CAApC,CAAhD;AAKP;;;;;;;;;;;AAUA,OAAM,SAAUU,mCAAV,CACFC,OADE,EAEFC,OAFE,EAGFC,CAHE,EAI0B;EAAA,IAA5BC,SAA4B,uEAAhBX,gBAAgB;EAE5B,MAAMY,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEL,OAAV;IAAmBM,QAAQ,EAAE,KAA7B;IAAoCC,UAAU,EAAE;EAAhD,CADS,EAET;IAAEF,MAAM,EAAEf,kBAAV;IAA8BgB,QAAQ,EAAE,KAAxC;IAA+CC,UAAU,EAAE;EAA3D,CAFS,CAAb;;EAIA,KAAK,MAAMC,MAAX,IAAqBP,OAArB,EAA8B;IAC1BG,IAAI,CAACK,IAAL,CAAU;MAAEJ,MAAM,EAAEG,MAAV;MAAkBF,QAAQ,EAAE,KAA5B;MAAmCC,UAAU,EAAE;IAA/C,CAAV;EACH;;EAED,MAAMG,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAad,iCAAiC,CAACe,IAA/C,CAAb;EACAf,iCAAiC,CAACgB,MAAlC,CACI;IACIC,WAAW,EAAElB,gBAAgB,CAACmB,kBADlC;IAEId;EAFJ,CADJ,EAKIQ,IALJ;EAQA,OAAO,IAAInB,sBAAJ,CAA2B;IAAEa,IAAF;IAAQD,SAAR;IAAmBO;EAAnB,CAA3B,CAAP;AACH;AAgBD;;;;;;;;;AAQA,OAAM,SAAUO,mCAAV,CACFF,WADE,EAE0B;EAAA,IAA5BZ,SAA4B,uEAAhBX,gBAAgB;EAE5B,IAAI,CAACuB,WAAW,CAACZ,SAAZ,CAAsBe,MAAtB,CAA6Bf,SAA7B,CAAL,EAA8C,MAAM,IAAIR,mCAAJ,EAAN;EAC9C,IAAIoB,WAAW,CAACL,IAAZ,CAAiBS,MAAjB,KAA4BrB,iCAAiC,CAACe,IAAlE,EACI,MAAM,IAAIpB,gCAAJ,EAAN;EAEJ,MAAM;IACFW,IAAI,EAAE;MAAEJ,OAAF;MAAWoB,IAAX;MAAiBnB;IAAjB,CADJ;IAEFS;EAFE,IAGFW,4CAA4C,CAACN,WAAD,CAHhD;EAIA,IAAIL,IAAI,CAACK,WAAL,KAAqBlB,gBAAgB,CAACmB,kBAA1C,EAA8D,MAAM,IAAIpB,gCAAJ,EAAN;EAC9D,IAAI,CAACI,OAAD,IAAY,CAACoB,IAAb,IAAqB,CAACnB,OAAO,CAACkB,MAAlC,EAA0C,MAAM,IAAIzB,gCAAJ,EAAN,CAXd,CAa5B;;EAEA,OAAO;IACHS,SADG;IAEHC,IAAI,EAAE;MACFJ,OADE;MAEFoB,IAFE;MAGFnB;IAHE,CAFH;IAOHS;EAPG,CAAP;AASH;AAgBD;;;;;;;;AAOA,OAAM,SAAUW,4CAAV,OAImB;EAAA,IAJoC;IACzDlB,SADyD;IAEzDC,IAAI,EAAE,CAACJ,OAAD,EAAUoB,IAAV,EAAgB,GAAGnB,OAAnB,CAFmD;IAGzDS;EAHyD,CAIpC;EACrB,OAAO;IACHP,SADG;IAEHC,IAAI,EAAE;MACFJ,OADE;MAEFoB,IAFE;MAGFnB;IAHE,CAFH;IAOHS,IAAI,EAAEZ,iCAAiC,CAACwB,MAAlC,CAAyCZ,IAAzC;EAPH,CAAP;AASH","names":["struct","u8","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","TokenInstruction","initializeMultisigInstructionData","createInitializeMultisigInstruction","account","signers","m","programId","keys","pubkey","isSigner","isWritable","signer","push","data","Buffer","alloc","span","encode","instruction","InitializeMultisig","decodeInitializeMultisigInstruction","equals","length","rent","decodeInitializeMultisigInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/initializeMultisig.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { AccountMeta, PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface InitializeMultisigInstructionData {\n    instruction: TokenInstruction.InitializeMultisig;\n    m: number;\n}\n\n/** TODO: docs */\nexport const initializeMultisigInstructionData = struct<InitializeMultisigInstructionData>([\n    u8('instruction'),\n    u8('m'),\n]);\n\n/**\n * Construct an InitializeMultisig instruction\n *\n * @param account   Multisig account\n * @param signers   Full set of signers\n * @param m         Number of required signatures\n * @param programId SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createInitializeMultisigInstruction(\n    account: PublicKey,\n    signers: PublicKey[],\n    m: number,\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: account, isSigner: false, isWritable: true },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n    for (const signer of signers) {\n        keys.push({ pubkey: signer, isSigner: false, isWritable: false });\n    }\n\n    const data = Buffer.alloc(initializeMultisigInstructionData.span);\n    initializeMultisigInstructionData.encode(\n        {\n            instruction: TokenInstruction.InitializeMultisig,\n            m,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        rent: AccountMeta;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.InitializeMultisig;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeInitializeMultisigInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedInitializeMultisigInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMultisigInstructionData.span)\n        throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, rent, signers },\n        data,\n    } = decodeInitializeMultisigInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.InitializeMultisig) throw new TokenInvalidInstructionTypeError();\n    if (!account || !rent || !signers.length) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated InitializeMultisig instruction */\nexport interface DecodedInitializeMultisigInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        rent: AccountMeta | undefined;\n        signers: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        m: number;\n    };\n}\n\n/**\n * Decode an InitializeMultisig instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeInitializeMultisigInstructionUnchecked({\n    programId,\n    keys: [account, rent, ...signers],\n    data,\n}: TransactionInstruction): DecodedInitializeMultisigInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            rent,\n            signers,\n        },\n        data: initializeMultisigInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}