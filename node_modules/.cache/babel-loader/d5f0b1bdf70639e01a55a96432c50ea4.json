{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createThawAccountInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Thaw (unfreeze) a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to thaw\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function thawAccount(connection, payer, account, mint, authority) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createThawAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"mappings":"AAAA,SAIIA,yBAJJ,EAMIC,WANJ,QAQO,iBARP;AASA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,4BAAT,QAA6C,6BAA7C;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA;;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,WAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,OAHG,EAIHC,IAJG,EAKHC,SALG,EAQyB;EAAA,IAF5BC,YAE4B,uEAFH,EAEG;EAAA,IAD5BC,cAC4B;EAAA,IAA5BC,SAA4B,uEAAhBX,gBAAgB;EAE5B,MAAM,CAACY,kBAAD,EAAqBC,OAArB,IAAgCX,UAAU,CAACM,SAAD,EAAYC,YAAZ,CAAhD;EAEA,MAAMK,WAAW,GAAG,IAAIf,WAAJ,GAAkBgB,GAAlB,CAChBd,4BAA4B,CAACK,OAAD,EAAUC,IAAV,EAAgBK,kBAAhB,EAAoCH,YAApC,EAAkDE,SAAlD,CADZ,CAApB;EAIA,OAAO,MAAMb,yBAAyB,CAACM,UAAD,EAAaU,WAAb,EAA0B,CAACT,KAAD,EAAQ,GAAGQ,OAAX,CAA1B,EAA+CH,cAA/C,CAAtC;AACH","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createThawAccountInstruction","getSigners","thawAccount","connection","payer","account","mint","authority","multiSigners","confirmOptions","programId","authorityPublicKey","signers","transaction","add"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/thawAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createThawAccountInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Thaw (unfreeze) a token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Account to thaw\n * @param mint           Mint for the account\n * @param authority      Mint freeze authority\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function thawAccount(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createThawAccountInstruction(account, mint, authorityPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module"}