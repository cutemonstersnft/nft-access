{"ast":null,"code":"import { getAssociatedTokenAddress } from '@solana/spl-token';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\n/**\n * Thrown when a transaction doesn't contain a valid Solana Pay transfer.\n */\n\nexport class ValidateTransferError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'ValidateTransferError';\n  }\n\n}\n/**\n * Check that a given transaction contains a valid Solana Pay transfer.\n *\n * @param connection - A connection to the cluster.\n * @param signature - The signature of the transaction to validate.\n * @param fields - Fields of a Solana Pay transfer request to validate.\n * @param options - Options for `getTransaction`.\n *\n * @throws {ValidateTransferError}\n */\n\nexport async function validateTransfer(connection, signature, _ref, options) {\n  let {\n    recipient,\n    amount,\n    splToken,\n    reference,\n    memo\n  } = _ref;\n  const response = await connection.getTransaction(signature, options);\n  if (!response) throw new ValidateTransferError('not found');\n  const message = response.transaction.message;\n  const meta = response.meta;\n  if (!meta) throw new ValidateTransferError('missing meta');\n  if (meta.err) throw meta.err;\n  const [preAmount, postAmount] = splToken ? await validateSPLTokenTransfer(message, meta, recipient, splToken) : await validateSystemTransfer(message, meta, recipient);\n  if (postAmount.minus(preAmount).lt(amount)) throw new ValidateTransferError('amount not transferred');\n\n  if (reference) {\n    if (!Array.isArray(reference)) {\n      reference = [reference];\n    }\n\n    for (const pubkey of reference) {\n      if (!message.accountKeys.some(accountKey => accountKey.equals(pubkey))) throw new ValidateTransferError('reference not found');\n    }\n  } // FIXME: add memo check\n\n\n  return response;\n}\n\nasync function validateSystemTransfer(message, meta, recipient) {\n  const accountIndex = message.accountKeys.findIndex(pubkey => pubkey.equals(recipient));\n  if (accountIndex === -1) throw new ValidateTransferError('recipient not found');\n  return [new BigNumber(meta.preBalances[accountIndex] || 0).div(LAMPORTS_PER_SOL), new BigNumber(meta.postBalances[accountIndex] || 0).div(LAMPORTS_PER_SOL)];\n}\n\nasync function validateSPLTokenTransfer(message, meta, recipient, splToken) {\n  var _a, _b;\n\n  const recipientATA = await getAssociatedTokenAddress(splToken, recipient);\n  const accountIndex = message.accountKeys.findIndex(pubkey => pubkey.equals(recipientATA));\n  if (accountIndex === -1) throw new ValidateTransferError('recipient not found');\n  const preBalance = (_a = meta.preTokenBalances) === null || _a === void 0 ? void 0 : _a.find(x => x.accountIndex === accountIndex);\n  const postBalance = (_b = meta.postTokenBalances) === null || _b === void 0 ? void 0 : _b.find(x => x.accountIndex === accountIndex);\n  return [new BigNumber((preBalance === null || preBalance === void 0 ? void 0 : preBalance.uiTokenAmount.uiAmountString) || 0), new BigNumber((postBalance === null || postBalance === void 0 ? void 0 : postBalance.uiTokenAmount.uiAmountString) || 0)];\n}","map":{"version":3,"mappings":"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","names":["getAssociatedTokenAddress","LAMPORTS_PER_SOL","BigNumber","ValidateTransferError","Error","constructor","validateTransfer","connection","signature","options","recipient","amount","splToken","reference","memo","response","getTransaction","message","transaction","meta","err","preAmount","postAmount","validateSPLTokenTransfer","validateSystemTransfer","minus","lt","Array","isArray","pubkey","accountKeys","some","accountKey","equals","accountIndex","findIndex","preBalances","div","postBalances","recipientATA","preBalance","preTokenBalances","_a","find","x","postBalance","postTokenBalances","_b","uiTokenAmount","uiAmountString"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/pay/src/validateTransfer.ts"],"sourcesContent":["import { getAssociatedTokenAddress } from '@solana/spl-token';\nimport {\n    ConfirmedTransactionMeta,\n    Connection,\n    Finality,\n    LAMPORTS_PER_SOL,\n    Message,\n    TransactionResponse,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { Amount, Memo, Recipient, References, SPLToken } from './types';\n\n/**\n * Thrown when a transaction doesn't contain a valid Solana Pay transfer.\n */\nexport class ValidateTransferError extends Error {\n    name = 'ValidateTransferError';\n}\n\n/**\n * Fields of a Solana Pay transfer request to validate.\n */\nexport interface ValidateTransferFields {\n    /** `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient). */\n    recipient: Recipient;\n    /** `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount). */\n    amount: Amount;\n    /** `spl-token` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token). */\n    splToken?: SPLToken;\n    /** `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference). */\n    reference?: References;\n    /** `memo` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#memo). */\n    memo?: Memo;\n}\n\n/**\n * Check that a given transaction contains a valid Solana Pay transfer.\n *\n * @param connection - A connection to the cluster.\n * @param signature - The signature of the transaction to validate.\n * @param fields - Fields of a Solana Pay transfer request to validate.\n * @param options - Options for `getTransaction`.\n *\n * @throws {ValidateTransferError}\n */\nexport async function validateTransfer(\n    connection: Connection,\n    signature: TransactionSignature,\n    { recipient, amount, splToken, reference, memo }: ValidateTransferFields,\n    options?: { commitment?: Finality }\n): Promise<TransactionResponse> {\n    const response = await connection.getTransaction(signature, options);\n    if (!response) throw new ValidateTransferError('not found');\n\n    const message = response.transaction.message;\n    const meta = response.meta;\n    if (!meta) throw new ValidateTransferError('missing meta');\n    if (meta.err) throw meta.err;\n\n    const [preAmount, postAmount] = splToken\n        ? await validateSPLTokenTransfer(message, meta, recipient, splToken)\n        : await validateSystemTransfer(message, meta, recipient);\n\n    if (postAmount.minus(preAmount).lt(amount)) throw new ValidateTransferError('amount not transferred');\n\n    if (reference) {\n        if (!Array.isArray(reference)) {\n            reference = [reference];\n        }\n\n        for (const pubkey of reference) {\n            if (!message.accountKeys.some((accountKey) => accountKey.equals(pubkey)))\n                throw new ValidateTransferError('reference not found');\n        }\n    }\n\n    // FIXME: add memo check\n\n    return response;\n}\n\nasync function validateSystemTransfer(\n    message: Message,\n    meta: ConfirmedTransactionMeta,\n    recipient: Recipient\n): Promise<[BigNumber, BigNumber]> {\n    const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipient));\n    if (accountIndex === -1) throw new ValidateTransferError('recipient not found');\n\n    return [\n        new BigNumber(meta.preBalances[accountIndex] || 0).div(LAMPORTS_PER_SOL),\n        new BigNumber(meta.postBalances[accountIndex] || 0).div(LAMPORTS_PER_SOL),\n    ];\n}\n\nasync function validateSPLTokenTransfer(\n    message: Message,\n    meta: ConfirmedTransactionMeta,\n    recipient: Recipient,\n    splToken: SPLToken\n): Promise<[BigNumber, BigNumber]> {\n    const recipientATA = await getAssociatedTokenAddress(splToken, recipient);\n    const accountIndex = message.accountKeys.findIndex((pubkey) => pubkey.equals(recipientATA));\n    if (accountIndex === -1) throw new ValidateTransferError('recipient not found');\n\n    const preBalance = meta.preTokenBalances?.find((x) => x.accountIndex === accountIndex);\n    const postBalance = meta.postTokenBalances?.find((x) => x.accountIndex === accountIndex);\n\n    return [\n        new BigNumber(preBalance?.uiTokenAmount.uiAmountString || 0),\n        new BigNumber(postBalance?.uiTokenAmount.uiAmountString || 0),\n    ];\n}\n"]},"metadata":{},"sourceType":"module"}