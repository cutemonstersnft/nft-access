{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createMintToInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Mint tokens to an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function mintTo(connection, payer, mint, destination, authority, amount) {\n  let multiSigners = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];\n  let confirmOptions = arguments.length > 7 ? arguments[7] : undefined;\n  let programId = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : TOKEN_PROGRAM_ID;\n  const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n  const transaction = new Transaction().add(createMintToInstruction(mint, destination, authorityPublicKey, amount, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"mappings":"AAAA,SAIIA,yBAJJ,EAMIC,WANJ,QAQO,iBARP;AASA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,uBAAT,QAAwC,6BAAxC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA;;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,MAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,IAHG,EAIHC,WAJG,EAKHC,SALG,EAMHC,MANG,EASyB;EAAA,IAF5BC,YAE4B,uEAFH,EAEG;EAAA,IAD5BC,cAC4B;EAAA,IAA5BC,SAA4B,uEAAhBZ,gBAAgB;EAE5B,MAAM,CAACa,kBAAD,EAAqBC,OAArB,IAAgCZ,UAAU,CAACM,SAAD,EAAYE,YAAZ,CAAhD;EAEA,MAAMK,WAAW,GAAG,IAAIhB,WAAJ,GAAkBiB,GAAlB,CAChBf,uBAAuB,CAACK,IAAD,EAAOC,WAAP,EAAoBM,kBAApB,EAAwCJ,MAAxC,EAAgDC,YAAhD,EAA8DE,SAA9D,CADP,CAApB;EAIA,OAAO,MAAMd,yBAAyB,CAACM,UAAD,EAAaW,WAAb,EAA0B,CAACV,KAAD,EAAQ,GAAGS,OAAX,CAA1B,EAA+CH,cAA/C,CAAtC;AACH","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createMintToInstruction","getSigners","mintTo","connection","payer","mint","destination","authority","amount","multiSigners","confirmOptions","programId","authorityPublicKey","signers","transaction","add"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/mintTo.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createMintToInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Mint tokens to an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param mint           Mint for the account\n * @param destination    Address of the account to mint to\n * @param authority      Minting authority\n * @param amount         Amount to mint\n * @param multiSigners   Signing accounts if `authority` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function mintTo(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: Signer | PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [authorityPublicKey, signers] = getSigners(authority, multiSigners);\n\n    const transaction = new Transaction().add(\n        createMintToInstruction(mint, destination, authorityPublicKey, amount, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module"}