{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createInitializeMintInstruction } from './../instructions/index.mjs';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from './../state/index.mjs';\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\n\nexport async function createMint(connection, payer, mintAuthority, freezeAuthority, decimals) {\n  let keypair = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Keypair.generate();\n  let confirmOptions = arguments.length > 6 ? arguments[6] : undefined;\n  let programId = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : TOKEN_PROGRAM_ID;\n  const lamports = await getMinimumBalanceForRentExemptMint(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MINT_SIZE,\n    lamports,\n    programId\n  }), createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"mappings":"AAAA,SAGIA,OAHJ,EAKIC,yBALJ,EAOIC,aAPJ,EAQIC,WARJ,QASO,iBATP;AAUA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,+BAAT,QAAgD,6BAAhD;AACA,SAASC,kCAAT,EAA6CC,SAA7C,QAA8D,sBAA9D;AAEA;;;;;;;;;;;;;;;AAcA,OAAO,eAAeC,UAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,aAHG,EAIHC,eAJG,EAKHC,QALG,EAQyB;EAAA,IAF5BC,OAE4B,uEAFlBd,OAAO,CAACe,QAAR,EAEkB;EAAA,IAD5BC,cAC4B;EAAA,IAA5BC,SAA4B,uEAAhBb,gBAAgB;EAE5B,MAAMc,QAAQ,GAAG,MAAMZ,kCAAkC,CAACG,UAAD,CAAzD;EAEA,MAAMU,WAAW,GAAG,IAAIhB,WAAJ,GAAkBiB,GAAlB,CAChBlB,aAAa,CAACmB,aAAd,CAA4B;IACxBC,UAAU,EAAEZ,KAAK,CAACa,SADM;IAExBC,gBAAgB,EAAEV,OAAO,CAACS,SAFF;IAGxBE,KAAK,EAAElB,SAHiB;IAIxBW,QAJwB;IAKxBD;EALwB,CAA5B,CADgB,EAQhBZ,+BAA+B,CAACS,OAAO,CAACS,SAAT,EAAoBV,QAApB,EAA8BF,aAA9B,EAA6CC,eAA7C,EAA8DK,SAA9D,CARf,CAApB;EAWA,MAAMhB,yBAAyB,CAACQ,UAAD,EAAaU,WAAb,EAA0B,CAACT,KAAD,EAAQI,OAAR,CAA1B,EAA4CE,cAA5C,CAA/B;EAEA,OAAOF,OAAO,CAACS,SAAf;AACH","names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMintInstruction","getMinimumBalanceForRentExemptMint","MINT_SIZE","createMint","connection","payer","mintAuthority","freezeAuthority","decimals","keypair","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/createMint.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createInitializeMintInstruction } from '../instructions/index';\nimport { getMinimumBalanceForRentExemptMint, MINT_SIZE } from '../state/index';\n\n/**\n * Create and initialize a new mint\n *\n * @param connection      Connection to use\n * @param payer           Payer of the transaction and initialization fees\n * @param mintAuthority   Account or multisig that will control minting\n * @param freezeAuthority Optional account or multisig that can freeze token accounts\n * @param decimals        Location of the decimal place\n * @param keypair         Optional keypair, defaulting to a new random one\n * @param confirmOptions  Options for confirming the transaction\n * @param programId       SPL Token program account\n *\n * @return Address of the new mint\n */\nexport async function createMint(\n    connection: Connection,\n    payer: Signer,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMint(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MINT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMintInstruction(keypair.publicKey, decimals, mintAuthority, freezeAuthority, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module"}