{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const mintToCheckedInstructionData = struct([u8('instruction'), u64('amount'), u8('decimals')]);\n/**\n * Construct a MintToChecked instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param decimals     Number of decimals in amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createMintToCheckedInstruction(mint, destination, authority, amount, decimals) {\n  let multiSigners = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }], authority, multiSigners);\n  const data = Buffer.alloc(mintToCheckedInstructionData.span);\n  mintToCheckedInstructionData.encode({\n    instruction: TokenInstruction.MintToChecked,\n    amount: BigInt(amount),\n    decimals\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a MintToChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeMintToCheckedInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== mintToCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  } = decodeMintToCheckedInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.MintToChecked) throw new TokenInvalidInstructionTypeError();\n  if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a MintToChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeMintToCheckedInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      mint,\n      destination,\n      authority,\n      multiSigners\n    },\n    data: mintToCheckedInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","mintToCheckedInstructionData","createMintToCheckedInstruction","mint","destination","authority","amount","decimals","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","MintToChecked","BigInt","decodeMintToCheckedInstruction","equals","length","decodeMintToCheckedInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/mintToChecked.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface MintToCheckedInstructionData {\n    instruction: TokenInstruction.MintToChecked;\n    amount: bigint;\n    decimals: number;\n}\n\n/** TODO: docs */\nexport const mintToCheckedInstructionData = struct<MintToCheckedInstructionData>([\n    u8('instruction'),\n    u64('amount'),\n    u8('decimals'),\n]);\n\n/**\n * Construct a MintToChecked instruction\n *\n * @param mint         Public key of the mint\n * @param destination  Address of the token account to mint to\n * @param authority    The mint authority\n * @param amount       Amount to mint\n * @param decimals     Number of decimals in amount to mint\n * @param multiSigners Signing accounts if `authority` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createMintToCheckedInstruction(\n    mint: PublicKey,\n    destination: PublicKey,\n    authority: PublicKey,\n    amount: number | bigint,\n    decimals: number,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: mint, isSigner: false, isWritable: true },\n            { pubkey: destination, isSigner: false, isWritable: true },\n        ],\n        authority,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(mintToCheckedInstructionData.span);\n    mintToCheckedInstructionData.encode(\n        {\n            instruction: TokenInstruction.MintToChecked,\n            amount: BigInt(amount),\n            decimals,\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid MintToChecked instruction */\nexport interface DecodedMintToCheckedInstruction {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta;\n        destination: AccountMeta;\n        authority: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.MintToChecked;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a MintToChecked instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeMintToCheckedInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedMintToCheckedInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== mintToCheckedInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { mint, destination, authority, multiSigners },\n        data,\n    } = decodeMintToCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.MintToChecked) throw new TokenInvalidInstructionTypeError();\n    if (!mint || !destination || !authority) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated MintToChecked instruction */\nexport interface DecodedMintToCheckedInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        mint: AccountMeta | undefined;\n        destination: AccountMeta | undefined;\n        authority: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n        decimals: number;\n    };\n}\n\n/**\n * Decode a MintToChecked instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeMintToCheckedInstructionUnchecked({\n    programId,\n    keys: [mint, destination, authority, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedMintToCheckedInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            mint,\n            destination,\n            authority,\n            multiSigners,\n        },\n        data: mintToCheckedInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}