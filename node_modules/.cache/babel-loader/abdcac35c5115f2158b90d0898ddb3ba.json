{"ast":null,"code":"import { Keypair, sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createInitializeMultisigInstruction } from './../instructions/index.mjs';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from './../state/index.mjs';\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\n\nexport async function createMultisig(connection, payer, signers, m) {\n  let keypair = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Keypair.generate();\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: MULTISIG_SIZE,\n    lamports,\n    programId\n  }), createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"mappings":"AAAA,SAGIA,OAHJ,EAKIC,yBALJ,EAOIC,aAPJ,EAQIC,WARJ,QASO,iBATP;AAUA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,mCAAT,QAAoD,6BAApD;AACA,SAASC,sCAAT,EAAiDC,aAAjD,QAAsE,sBAAtE;AAEA;;;;;;;;;;;;;;AAaA,OAAO,eAAeC,cAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,OAHG,EAIHC,CAJG,EAOyB;EAAA,IAF5BC,OAE4B,uEAFlBb,OAAO,CAACc,QAAR,EAEkB;EAAA,IAD5BC,cAC4B;EAAA,IAA5BC,SAA4B,uEAAhBZ,gBAAgB;EAE5B,MAAMa,QAAQ,GAAG,MAAMX,sCAAsC,CAACG,UAAD,CAA7D;EAEA,MAAMS,WAAW,GAAG,IAAIf,WAAJ,GAAkBgB,GAAlB,CAChBjB,aAAa,CAACkB,aAAd,CAA4B;IACxBC,UAAU,EAAEX,KAAK,CAACY,SADM;IAExBC,gBAAgB,EAAEV,OAAO,CAACS,SAFF;IAGxBE,KAAK,EAAEjB,aAHiB;IAIxBU,QAJwB;IAKxBD;EALwB,CAA5B,CADgB,EAQhBX,mCAAmC,CAACQ,OAAO,CAACS,SAAT,EAAoBX,OAApB,EAA6BC,CAA7B,EAAgCI,SAAhC,CARnB,CAApB;EAWA,MAAMf,yBAAyB,CAACQ,UAAD,EAAaS,WAAb,EAA0B,CAACR,KAAD,EAAQG,OAAR,CAA1B,EAA4CE,cAA5C,CAA/B;EAEA,OAAOF,OAAO,CAACS,SAAf;AACH","names":["Keypair","sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeMultisigInstruction","getMinimumBalanceForRentExemptMultisig","MULTISIG_SIZE","createMultisig","connection","payer","signers","m","keypair","generate","confirmOptions","programId","lamports","transaction","add","createAccount","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/createMultisig.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createInitializeMultisigInstruction } from '../instructions/index';\nimport { getMinimumBalanceForRentExemptMultisig, MULTISIG_SIZE } from '../state/index';\n\n/**\n * Create and initialize a new multisig\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param signers        Full set of signers\n * @param m              Number of required signatures\n * @param keypair        Optional keypair, defaulting to a new random one\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new multisig\n */\nexport async function createMultisig(\n    connection: Connection,\n    payer: Signer,\n    signers: PublicKey[],\n    m: number,\n    keypair = Keypair.generate(),\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    const lamports = await getMinimumBalanceForRentExemptMultisig(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: MULTISIG_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeMultisigInstruction(keypair.publicKey, signers, m, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module"}