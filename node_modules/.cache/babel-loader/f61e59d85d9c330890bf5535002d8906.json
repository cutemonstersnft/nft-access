{"ast":null,"code":"import { SOLANA_PROTOCOL } from './constants.mjs';\n/**\n * Encode a Solana Pay URL.\n *\n * @param fields Fields to encode in the URL.\n */\n\nexport function encodeURL(fields) {\n  return 'link' in fields ? encodeTransactionRequestURL(fields) : encodeTransferRequestURL(fields);\n}\n\nfunction encodeTransactionRequestURL(_ref) {\n  let {\n    link,\n    label,\n    message\n  } = _ref;\n  // Remove trailing slashes\n  const pathname = link.search ? encodeURIComponent(String(link).replace(/\\/\\?/, '?')) : String(link).replace(/\\/$/, '');\n  const url = new URL(SOLANA_PROTOCOL + pathname);\n\n  if (label) {\n    url.searchParams.append('label', label);\n  }\n\n  if (message) {\n    url.searchParams.append('message', message);\n  }\n\n  return url;\n}\n\nfunction encodeTransferRequestURL(_ref2) {\n  let {\n    recipient,\n    amount,\n    splToken,\n    reference,\n    label,\n    message,\n    memo\n  } = _ref2;\n  const pathname = recipient.toBase58();\n  const url = new URL(SOLANA_PROTOCOL + pathname);\n\n  if (amount) {\n    url.searchParams.append('amount', amount.toFixed(amount.decimalPlaces()));\n  }\n\n  if (splToken) {\n    url.searchParams.append('spl-token', splToken.toBase58());\n  }\n\n  if (reference) {\n    if (!Array.isArray(reference)) {\n      reference = [reference];\n    }\n\n    for (const pubkey of reference) {\n      url.searchParams.append('reference', pubkey.toBase58());\n    }\n  }\n\n  if (label) {\n    url.searchParams.append('label', label);\n  }\n\n  if (message) {\n    url.searchParams.append('message', message);\n  }\n\n  if (memo) {\n    url.searchParams.append('memo', memo);\n  }\n\n  return url;\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,QAAgC,iBAAhC;AAmCA;;;;;;AAKA,OAAM,SAAUC,SAAV,CAAoBC,MAApB,EAAkF;EACpF,OAAO,UAAUA,MAAV,GAAmBC,2BAA2B,CAACD,MAAD,CAA9C,GAAyDE,wBAAwB,CAACF,MAAD,CAAxF;AACH;;AAED,SAASC,2BAAT,OAA0F;EAAA,IAArD;IAAEE,IAAF;IAAQC,KAAR;IAAeC;EAAf,CAAqD;EACtF;EACA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,MAAL,GACXC,kBAAkB,CAACC,MAAM,CAACN,IAAD,CAAN,CAAaO,OAAb,CAAqB,MAArB,EAA6B,GAA7B,CAAD,CADP,GAEXD,MAAM,CAACN,IAAD,CAAN,CAAaO,OAAb,CAAqB,KAArB,EAA4B,EAA5B,CAFN;EAGA,MAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQd,eAAe,GAAGQ,QAA1B,CAAZ;;EAEA,IAAIF,KAAJ,EAAW;IACPO,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,OAAxB,EAAiCV,KAAjC;EACH;;EAED,IAAIC,OAAJ,EAAa;IACTM,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,SAAxB,EAAmCT,OAAnC;EACH;;EAED,OAAOM,GAAP;AACH;;AAED,SAAST,wBAAT,QAQ2B;EAAA,IARO;IAC9Ba,SAD8B;IAE9BC,MAF8B;IAG9BC,QAH8B;IAI9BC,SAJ8B;IAK9Bd,KAL8B;IAM9BC,OAN8B;IAO9Bc;EAP8B,CAQP;EACvB,MAAMb,QAAQ,GAAGS,SAAS,CAACK,QAAV,EAAjB;EACA,MAAMT,GAAG,GAAG,IAAIC,GAAJ,CAAQd,eAAe,GAAGQ,QAA1B,CAAZ;;EAEA,IAAIU,MAAJ,EAAY;IACRL,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,QAAxB,EAAkCE,MAAM,CAACK,OAAP,CAAeL,MAAM,CAACM,aAAP,EAAf,CAAlC;EACH;;EAED,IAAIL,QAAJ,EAAc;IACVN,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,WAAxB,EAAqCG,QAAQ,CAACG,QAAT,EAArC;EACH;;EAED,IAAIF,SAAJ,EAAe;IACX,IAAI,CAACK,KAAK,CAACC,OAAN,CAAcN,SAAd,CAAL,EAA+B;MAC3BA,SAAS,GAAG,CAACA,SAAD,CAAZ;IACH;;IAED,KAAK,MAAMO,MAAX,IAAqBP,SAArB,EAAgC;MAC5BP,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,WAAxB,EAAqCW,MAAM,CAACL,QAAP,EAArC;IACH;EACJ;;EAED,IAAIhB,KAAJ,EAAW;IACPO,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,OAAxB,EAAiCV,KAAjC;EACH;;EAED,IAAIC,OAAJ,EAAa;IACTM,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,SAAxB,EAAmCT,OAAnC;EACH;;EAED,IAAIc,IAAJ,EAAU;IACNR,GAAG,CAACE,YAAJ,CAAiBC,MAAjB,CAAwB,MAAxB,EAAgCK,IAAhC;EACH;;EAED,OAAOR,GAAP;AACH","names":["SOLANA_PROTOCOL","encodeURL","fields","encodeTransactionRequestURL","encodeTransferRequestURL","link","label","message","pathname","search","encodeURIComponent","String","replace","url","URL","searchParams","append","recipient","amount","splToken","reference","memo","toBase58","toFixed","decimalPlaces","Array","isArray","pubkey"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/pay/src/encodeURL.ts"],"sourcesContent":["import { SOLANA_PROTOCOL } from './constants';\nimport { Amount, Label, Memo, Message, Recipient, References, SPLToken } from './types';\n\n/**\n * Fields of a Solana Pay transaction request URL.\n */\nexport interface TransactionRequestURLFields {\n    /** `link` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#link). */\n    link: URL;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label-1). */\n    label?: Label;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message-1).  */\n    message?: Message;\n}\n\n/**\n * Fields of a Solana Pay transfer request URL.\n */\nexport interface TransferRequestURLFields {\n    /** `recipient` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#recipient). */\n    recipient: Recipient;\n    /** `amount` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#amount). */\n    amount?: Amount;\n    /** `spl-token` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#spl-token). */\n    splToken?: SPLToken;\n    /** `reference` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#reference). */\n    reference?: References;\n    /** `label` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#label). */\n    label?: Label;\n    /** `message` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#message).  */\n    message?: Message;\n    /** `memo` in the [Solana Pay spec](https://github.com/solana-labs/solana-pay/blob/master/SPEC.md#memo). */\n    memo?: Memo;\n}\n\n/**\n * Encode a Solana Pay URL.\n *\n * @param fields Fields to encode in the URL.\n */\nexport function encodeURL(fields: TransactionRequestURLFields | TransferRequestURLFields): URL {\n    return 'link' in fields ? encodeTransactionRequestURL(fields) : encodeTransferRequestURL(fields);\n}\n\nfunction encodeTransactionRequestURL({ link, label, message }: TransactionRequestURLFields): URL {\n    // Remove trailing slashes\n    const pathname = link.search\n        ? encodeURIComponent(String(link).replace(/\\/\\?/, '?'))\n        : String(link).replace(/\\/$/, '');\n    const url = new URL(SOLANA_PROTOCOL + pathname);\n\n    if (label) {\n        url.searchParams.append('label', label);\n    }\n\n    if (message) {\n        url.searchParams.append('message', message);\n    }\n\n    return url;\n}\n\nfunction encodeTransferRequestURL({\n    recipient,\n    amount,\n    splToken,\n    reference,\n    label,\n    message,\n    memo,\n}: TransferRequestURLFields): URL {\n    const pathname = recipient.toBase58();\n    const url = new URL(SOLANA_PROTOCOL + pathname);\n\n    if (amount) {\n        url.searchParams.append('amount', amount.toFixed(amount.decimalPlaces()));\n    }\n\n    if (splToken) {\n        url.searchParams.append('spl-token', splToken.toBase58());\n    }\n\n    if (reference) {\n        if (!Array.isArray(reference)) {\n            reference = [reference];\n        }\n\n        for (const pubkey of reference) {\n            url.searchParams.append('reference', pubkey.toBase58());\n        }\n    }\n\n    if (label) {\n        url.searchParams.append('label', label);\n    }\n\n    if (message) {\n        url.searchParams.append('message', message);\n    }\n\n    if (memo) {\n        url.searchParams.append('memo', memo);\n    }\n\n    return url;\n}\n"]},"metadata":{},"sourceType":"module"}