{"ast":null,"code":"import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { TokenInvalidInstructionDataError, TokenInvalidInstructionKeysError, TokenInvalidInstructionProgramError, TokenInvalidInstructionTypeError } from './../errors.mjs';\nimport { addSigners } from './internal.mjs';\nimport { TokenInstruction } from './types.mjs';\n/** TODO: docs */\n\nexport const burnInstructionData = struct([u8('instruction'), u64('amount')]);\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createBurnInstruction(account, mint, owner, amount) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let programId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : TOKEN_PROGRAM_ID;\n  const keys = addSigners([{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }], owner, multiSigners);\n  const data = Buffer.alloc(burnInstructionData.span);\n  burnInstructionData.encode({\n    instruction: TokenInstruction.Burn,\n    amount: BigInt(amount)\n  }, data);\n  return new TransactionInstruction({\n    keys,\n    programId,\n    data\n  });\n}\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\n\nexport function decodeBurnInstruction(instruction) {\n  let programId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TOKEN_PROGRAM_ID;\n  if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n  if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\n  const {\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  } = decodeBurnInstructionUnchecked(instruction);\n  if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\n  if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError(); // TODO: key checks?\n\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data\n  };\n}\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\n\nexport function decodeBurnInstructionUnchecked(_ref) {\n  let {\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data\n  } = _ref;\n  return {\n    programId,\n    keys: {\n      account,\n      mint,\n      owner,\n      multiSigners\n    },\n    data: burnInstructionData.decode(data)\n  };\n}","map":{"version":3,"mappings":"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","names":["struct","u8","u64","TransactionInstruction","TOKEN_PROGRAM_ID","TokenInvalidInstructionDataError","TokenInvalidInstructionKeysError","TokenInvalidInstructionProgramError","TokenInvalidInstructionTypeError","addSigners","TokenInstruction","burnInstructionData","createBurnInstruction","account","mint","owner","amount","multiSigners","programId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction","Burn","BigInt","decodeBurnInstruction","equals","length","decodeBurnInstructionUnchecked","decode"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/burn.ts"],"sourcesContent":["import { struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/buffer-layout-utils';\nimport { AccountMeta, PublicKey, Signer, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    TokenInvalidInstructionDataError,\n    TokenInvalidInstructionKeysError,\n    TokenInvalidInstructionProgramError,\n    TokenInvalidInstructionTypeError,\n} from '../errors';\nimport { addSigners } from './internal';\nimport { TokenInstruction } from './types';\n\n/** TODO: docs */\nexport interface BurnInstructionData {\n    instruction: TokenInstruction.Burn;\n    amount: bigint;\n}\n\n/** TODO: docs */\nexport const burnInstructionData = struct<BurnInstructionData>([u8('instruction'), u64('amount')]);\n\n/**\n * Construct a Burn instruction\n *\n * @param account      Account to burn tokens from\n * @param mint         Mint for the account\n * @param owner        Owner of the account\n * @param amount       Number of tokens to burn\n * @param multiSigners Signing accounts if `owner` is a multisig\n * @param programId    SPL Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createBurnInstruction(\n    account: PublicKey,\n    mint: PublicKey,\n    owner: PublicKey,\n    amount: number | bigint,\n    multiSigners: Signer[] = [],\n    programId = TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = addSigners(\n        [\n            { pubkey: account, isSigner: false, isWritable: true },\n            { pubkey: mint, isSigner: false, isWritable: true },\n        ],\n        owner,\n        multiSigners\n    );\n\n    const data = Buffer.alloc(burnInstructionData.span);\n    burnInstructionData.encode(\n        {\n            instruction: TokenInstruction.Burn,\n            amount: BigInt(amount),\n        },\n        data\n    );\n\n    return new TransactionInstruction({ keys, programId, data });\n}\n\n/** A decoded, valid Burn instruction */\nexport interface DecodedBurnInstruction {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta;\n        mint: AccountMeta;\n        owner: AccountMeta;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: TokenInstruction.Burn;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction and validate it\n *\n * @param instruction Transaction instruction to decode\n * @param programId   SPL Token program account\n *\n * @return Decoded, valid instruction\n */\nexport function decodeBurnInstruction(\n    instruction: TransactionInstruction,\n    programId = TOKEN_PROGRAM_ID\n): DecodedBurnInstruction {\n    if (!instruction.programId.equals(programId)) throw new TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnInstructionData.span) throw new TokenInvalidInstructionDataError();\n\n    const {\n        keys: { account, mint, owner, multiSigners },\n        data,\n    } = decodeBurnInstructionUnchecked(instruction);\n    if (data.instruction !== TokenInstruction.Burn) throw new TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new TokenInvalidInstructionKeysError();\n\n    // TODO: key checks?\n\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data,\n    };\n}\n\n/** A decoded, non-validated Burn instruction */\nexport interface DecodedBurnInstructionUnchecked {\n    programId: PublicKey;\n    keys: {\n        account: AccountMeta | undefined;\n        mint: AccountMeta | undefined;\n        owner: AccountMeta | undefined;\n        multiSigners: AccountMeta[];\n    };\n    data: {\n        instruction: number;\n        amount: bigint;\n    };\n}\n\n/**\n * Decode a Burn instruction without validating it\n *\n * @param instruction Transaction instruction to decode\n *\n * @return Decoded, non-validated instruction\n */\nexport function decodeBurnInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data,\n}: TransactionInstruction): DecodedBurnInstructionUnchecked {\n    return {\n        programId,\n        keys: {\n            account,\n            mint,\n            owner,\n            multiSigners,\n        },\n        data: burnInstructionData.decode(data),\n    };\n}\n"]},"metadata":{},"sourceType":"module"}