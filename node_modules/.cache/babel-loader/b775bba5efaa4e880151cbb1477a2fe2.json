{"ast":null,"code":"import { SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from './../constants.mjs';\n/**\n * Construct an AssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\n\nexport function createAssociatedTokenAccountInstruction(payer, associatedToken, owner, mint) {\n  let programId = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : TOKEN_PROGRAM_ID;\n  let associatedTokenProgramId = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : ASSOCIATED_TOKEN_PROGRAM_ID;\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedToken,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.alloc(0)\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAoBA,aAApB,EAAmCC,kBAAnC,EAAuDC,sBAAvD,QAAqF,iBAArF;AACA,SAASC,2BAAT,EAAsCC,gBAAtC,QAA8D,oBAA9D;AAEA;;;;;;;;;;;;;AAYA,OAAM,SAAUC,uCAAV,CACFC,KADE,EAEFC,eAFE,EAGFC,KAHE,EAIFC,IAJE,EAMoD;EAAA,IADtDC,SACsD,uEAD1CN,gBAC0C;EAAA,IAAtDO,wBAAsD,uEAA3BR,2BAA2B;EAEtD,MAAMS,IAAI,GAAG,CACT;IAAEC,MAAM,EAAEP,KAAV;IAAiBQ,QAAQ,EAAE,IAA3B;IAAiCC,UAAU,EAAE;EAA7C,CADS,EAET;IAAEF,MAAM,EAAEN,eAAV;IAA2BO,QAAQ,EAAE,KAArC;IAA4CC,UAAU,EAAE;EAAxD,CAFS,EAGT;IAAEF,MAAM,EAAEL,KAAV;IAAiBM,QAAQ,EAAE,KAA3B;IAAkCC,UAAU,EAAE;EAA9C,CAHS,EAIT;IAAEF,MAAM,EAAEJ,IAAV;IAAgBK,QAAQ,EAAE,KAA1B;IAAiCC,UAAU,EAAE;EAA7C,CAJS,EAKT;IAAEF,MAAM,EAAEb,aAAa,CAACU,SAAxB;IAAmCI,QAAQ,EAAE,KAA7C;IAAoDC,UAAU,EAAE;EAAhE,CALS,EAMT;IAAEF,MAAM,EAAEH,SAAV;IAAqBI,QAAQ,EAAE,KAA/B;IAAsCC,UAAU,EAAE;EAAlD,CANS,EAOT;IAAEF,MAAM,EAAEZ,kBAAV;IAA8Ba,QAAQ,EAAE,KAAxC;IAA+CC,UAAU,EAAE;EAA3D,CAPS,CAAb;EAUA,OAAO,IAAIb,sBAAJ,CAA2B;IAC9BU,IAD8B;IAE9BF,SAAS,EAAEC,wBAFmB;IAG9BK,IAAI,EAAEC,MAAM,CAACC,KAAP,CAAa,CAAb;EAHwB,CAA3B,CAAP;AAKH","names":["SystemProgram","SYSVAR_RENT_PUBKEY","TransactionInstruction","ASSOCIATED_TOKEN_PROGRAM_ID","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","payer","associatedToken","owner","mint","programId","associatedTokenProgramId","keys","pubkey","isSigner","isWritable","data","Buffer","alloc"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/instructions/associatedTokenAccount.ts"],"sourcesContent":["import { PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../constants';\n\n/**\n * Construct an AssociatedTokenAccount instruction\n *\n * @param payer                    Payer of the initialization fees\n * @param associatedToken          New associated token account\n * @param owner                    Owner of the new account\n * @param mint                     Token mint account\n * @param programId                SPL Token program account\n * @param associatedTokenProgramId SPL Associated Token program account\n *\n * @return Instruction to add to a transaction\n */\nexport function createAssociatedTokenAccountInstruction(\n    payer: PublicKey,\n    associatedToken: PublicKey,\n    owner: PublicKey,\n    mint: PublicKey,\n    programId = TOKEN_PROGRAM_ID,\n    associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID\n): TransactionInstruction {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: associatedToken, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: mint, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: programId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n    ];\n\n    return new TransactionInstruction({\n        keys,\n        programId: associatedTokenProgramId,\n        data: Buffer.alloc(0),\n    });\n}\n"]},"metadata":{},"sourceType":"module"}