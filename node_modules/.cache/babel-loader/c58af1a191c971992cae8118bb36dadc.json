{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createAssociatedTokenAccountInstruction, createInitializeAccountInstruction, createSyncNativeInstruction } from './../instructions/index.mjs';\nimport { ACCOUNT_SIZE, getAssociatedTokenAddress, getMinimumBalanceForRentExemptAccount } from './../state/index.mjs';\nimport { createAccount } from './createAccount.mjs';\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\n\nexport async function createWrappedNativeAccount(connection, payer, owner, amount, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n  if (!amount) return await createAccount(connection, payer, NATIVE_MINT, owner, keypair, confirmOptions, programId); // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n\n  if (!keypair) {\n    const associatedToken = await getAssociatedTokenAddress(NATIVE_MINT, owner, false, programId, ASSOCIATED_TOKEN_PROGRAM_ID);\n    const transaction = new Transaction().add(createAssociatedTokenAccountInstruction(payer.publicKey, associatedToken, owner, NATIVE_MINT, programId, ASSOCIATED_TOKEN_PROGRAM_ID), SystemProgram.transfer({\n      fromPubkey: payer.publicKey,\n      toPubkey: associatedToken,\n      lamports: amount\n    }), createSyncNativeInstruction(associatedToken, programId));\n    await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  } // Otherwise, create the account with the provided keypair and return its public key\n\n\n  const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: ACCOUNT_SIZE,\n    lamports,\n    programId\n  }), SystemProgram.transfer({\n    fromPubkey: payer.publicKey,\n    toPubkey: keypair.publicKey,\n    lamports: amount\n  }), createInitializeAccountInstruction(keypair.publicKey, NATIVE_MINT, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"mappings":"AAAA,SAKIA,yBALJ,EAOIC,aAPJ,EAQIC,WARJ,QASO,iBATP;AAUA,SAASC,2BAAT,EAAsCC,WAAtC,EAAmDC,gBAAnD,QAA2E,oBAA3E;AACA,SACIC,uCADJ,EAEIC,kCAFJ,EAGIC,2BAHJ,QAIO,6BAJP;AAKA,SAASC,YAAT,EAAuBC,yBAAvB,EAAkDC,qCAAlD,QAA+F,sBAA/F;AACA,SAASC,aAAT,QAA8B,qBAA9B;AAEA;;;;;;;;;;;;;;AAaA,OAAO,eAAeC,0BAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,KAHG,EAIHC,MAJG,EAKHC,OALG,EAMHC,cANG,EAOyB;EAAA,IAA5BC,SAA4B,uEAAhBf,gBAAgB;EAE5B;EACA,IAAI,CAACY,MAAL,EAAa,OAAO,MAAML,aAAa,CAACE,UAAD,EAAaC,KAAb,EAAoBX,WAApB,EAAiCY,KAAjC,EAAwCE,OAAxC,EAAiDC,cAAjD,EAAiEC,SAAjE,CAA1B,CAHe,CAK5B;;EACA,IAAI,CAACF,OAAL,EAAc;IACV,MAAMG,eAAe,GAAG,MAAMX,yBAAyB,CACnDN,WADmD,EAEnDY,KAFmD,EAGnD,KAHmD,EAInDI,SAJmD,EAKnDjB,2BALmD,CAAvD;IAQA,MAAMmB,WAAW,GAAG,IAAIpB,WAAJ,GAAkBqB,GAAlB,CAChBjB,uCAAuC,CACnCS,KAAK,CAACS,SAD6B,EAEnCH,eAFmC,EAGnCL,KAHmC,EAInCZ,WAJmC,EAKnCgB,SALmC,EAMnCjB,2BANmC,CADvB,EAShBF,aAAa,CAACwB,QAAd,CAAuB;MACnBC,UAAU,EAAEX,KAAK,CAACS,SADC;MAEnBG,QAAQ,EAAEN,eAFS;MAGnBO,QAAQ,EAAEX;IAHS,CAAvB,CATgB,EAchBT,2BAA2B,CAACa,eAAD,EAAkBD,SAAlB,CAdX,CAApB;IAiBA,MAAMpB,yBAAyB,CAACc,UAAD,EAAaQ,WAAb,EAA0B,CAACP,KAAD,CAA1B,EAAmCI,cAAnC,CAA/B;IAEA,OAAOE,eAAP;EACH,CAnC2B,CAqC5B;;;EACA,MAAMO,QAAQ,GAAG,MAAMjB,qCAAqC,CAACG,UAAD,CAA5D;EAEA,MAAMQ,WAAW,GAAG,IAAIpB,WAAJ,GAAkBqB,GAAlB,CAChBtB,aAAa,CAACW,aAAd,CAA4B;IACxBc,UAAU,EAAEX,KAAK,CAACS,SADM;IAExBK,gBAAgB,EAAEX,OAAO,CAACM,SAFF;IAGxBM,KAAK,EAAErB,YAHiB;IAIxBmB,QAJwB;IAKxBR;EALwB,CAA5B,CADgB,EAQhBnB,aAAa,CAACwB,QAAd,CAAuB;IACnBC,UAAU,EAAEX,KAAK,CAACS,SADC;IAEnBG,QAAQ,EAAET,OAAO,CAACM,SAFC;IAGnBI,QAAQ,EAAEX;EAHS,CAAvB,CARgB,EAahBV,kCAAkC,CAACW,OAAO,CAACM,SAAT,EAAoBpB,WAApB,EAAiCY,KAAjC,EAAwCI,SAAxC,CAblB,CAApB;EAgBA,MAAMpB,yBAAyB,CAACc,UAAD,EAAaQ,WAAb,EAA0B,CAACP,KAAD,EAAQG,OAAR,CAA1B,EAA4CC,cAA5C,CAA/B;EAEA,OAAOD,OAAO,CAACM,SAAf;AACH","names":["sendAndConfirmTransaction","SystemProgram","Transaction","ASSOCIATED_TOKEN_PROGRAM_ID","NATIVE_MINT","TOKEN_PROGRAM_ID","createAssociatedTokenAccountInstruction","createInitializeAccountInstruction","createSyncNativeInstruction","ACCOUNT_SIZE","getAssociatedTokenAddress","getMinimumBalanceForRentExemptAccount","createAccount","createWrappedNativeAccount","connection","payer","owner","amount","keypair","confirmOptions","programId","associatedToken","transaction","add","publicKey","transfer","fromPubkey","toPubkey","lamports","newAccountPubkey","space"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/createWrappedNativeAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, NATIVE_MINT, TOKEN_PROGRAM_ID } from '../constants';\nimport {\n    createAssociatedTokenAccountInstruction,\n    createInitializeAccountInstruction,\n    createSyncNativeInstruction,\n} from '../instructions/index';\nimport { ACCOUNT_SIZE, getAssociatedTokenAddress, getMinimumBalanceForRentExemptAccount } from '../state/index';\nimport { createAccount } from './createAccount';\n\n/**\n * Create, initialize, and fund a new wrapped native SOL account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param owner          Owner of the new token account\n * @param amount         Number of lamports to wrap\n * @param keypair        Optional keypair, defaulting to the associated token account for the native mint and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new wrapped native SOL account\n */\nexport async function createWrappedNativeAccount(\n    connection: Connection,\n    payer: Signer,\n    owner: PublicKey,\n    amount: number,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If the amount provided is explicitly 0 or NaN, just create the account without funding it\n    if (!amount) return await createAccount(connection, payer, NATIVE_MINT, owner, keypair, confirmOptions, programId);\n\n    // If a keypair isn't provided, create the account at the owner's ATA for the native mint and return its address\n    if (!keypair) {\n        const associatedToken = await getAssociatedTokenAddress(\n            NATIVE_MINT,\n            owner,\n            false,\n            programId,\n            ASSOCIATED_TOKEN_PROGRAM_ID\n        );\n\n        const transaction = new Transaction().add(\n            createAssociatedTokenAccountInstruction(\n                payer.publicKey,\n                associatedToken,\n                owner,\n                NATIVE_MINT,\n                programId,\n                ASSOCIATED_TOKEN_PROGRAM_ID\n            ),\n            SystemProgram.transfer({\n                fromPubkey: payer.publicKey,\n                toPubkey: associatedToken,\n                lamports: amount,\n            }),\n            createSyncNativeInstruction(associatedToken, programId)\n        );\n\n        await sendAndConfirmTransaction(connection, transaction, [payer], confirmOptions);\n\n        return associatedToken;\n    }\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: keypair.publicKey,\n            lamports: amount,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, NATIVE_MINT, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module"}