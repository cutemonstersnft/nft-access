{"ast":null,"code":"import { PublicKey } from '@solana/web3.js';\n/** @internal */\n\nexport function getSigners(signerOrMultisig, multiSigners) {\n  return signerOrMultisig instanceof PublicKey ? [signerOrMultisig, multiSigners] : [signerOrMultisig.publicKey, [signerOrMultisig]];\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAAkC,iBAAlC;AAEA;;AACA,OAAM,SAAUC,UAAV,CAAqBC,gBAArB,EAA2DC,YAA3D,EAAiF;EACnF,OAAOD,gBAAgB,YAAYF,SAA5B,GACD,CAACE,gBAAD,EAAmBC,YAAnB,CADC,GAED,CAACD,gBAAgB,CAACE,SAAlB,EAA6B,CAACF,gBAAD,CAA7B,CAFN;AAGH","names":["PublicKey","getSigners","signerOrMultisig","multiSigners","publicKey"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/internal.ts"],"sourcesContent":["import { PublicKey, Signer } from '@solana/web3.js';\n\n/** @internal */\nexport function getSigners(signerOrMultisig: Signer | PublicKey, multiSigners: Signer[]): [PublicKey, Signer[]] {\n    return signerOrMultisig instanceof PublicKey\n        ? [signerOrMultisig, multiSigners]\n        : [signerOrMultisig.publicKey, [signerOrMultisig]];\n}\n"]},"metadata":{},"sourceType":"module"}