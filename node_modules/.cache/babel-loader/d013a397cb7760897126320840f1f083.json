{"ast":null,"code":"import { sendAndConfirmTransaction, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createRevokeInstruction } from './../instructions/index.mjs';\nimport { getSigners } from './internal.mjs';\n/**\n * Revoke approval for the transfer of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\n\nexport async function revoke(connection, payer, account, owner) {\n  let multiSigners = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  let confirmOptions = arguments.length > 5 ? arguments[5] : undefined;\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n  const transaction = new Transaction().add(createRevokeInstruction(account, ownerPublicKey, multiSigners, programId));\n  return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}","map":{"version":3,"mappings":"AAAA,SAIIA,yBAJJ,EAMIC,WANJ,QAQO,iBARP;AASA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,uBAAT,QAAwC,6BAAxC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AAEA;;;;;;;;;;;;;;AAaA,OAAO,eAAeC,MAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,OAHG,EAIHC,KAJG,EAOyB;EAAA,IAF5BC,YAE4B,uEAFH,EAEG;EAAA,IAD5BC,cAC4B;EAAA,IAA5BC,SAA4B,uEAAhBV,gBAAgB;EAE5B,MAAM,CAACW,cAAD,EAAiBC,OAAjB,IAA4BV,UAAU,CAACK,KAAD,EAAQC,YAAR,CAA5C;EAEA,MAAMK,WAAW,GAAG,IAAId,WAAJ,GAAkBe,GAAlB,CAChBb,uBAAuB,CAACK,OAAD,EAAUK,cAAV,EAA0BH,YAA1B,EAAwCE,SAAxC,CADP,CAApB;EAIA,OAAO,MAAMZ,yBAAyB,CAACM,UAAD,EAAaS,WAAb,EAA0B,CAACR,KAAD,EAAQ,GAAGO,OAAX,CAA1B,EAA+CH,cAA/C,CAAtC;AACH","names":["sendAndConfirmTransaction","Transaction","TOKEN_PROGRAM_ID","createRevokeInstruction","getSigners","revoke","connection","payer","account","owner","multiSigners","confirmOptions","programId","ownerPublicKey","signers","transaction","add"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/revoke.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    Transaction,\n    TransactionSignature,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createRevokeInstruction } from '../instructions/index';\nimport { getSigners } from './internal';\n\n/**\n * Revoke approval for the transfer of tokens from an account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction fees\n * @param account        Address of the token account\n * @param owner          Owner of the account\n * @param multiSigners   Signing accounts if `owner` is a multisig\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Signature of the confirmed transaction\n */\nexport async function revoke(\n    connection: Connection,\n    payer: Signer,\n    account: PublicKey,\n    owner: Signer | PublicKey,\n    multiSigners: Signer[] = [],\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<TransactionSignature> {\n    const [ownerPublicKey, signers] = getSigners(owner, multiSigners);\n\n    const transaction = new Transaction().add(\n        createRevokeInstruction(account, ownerPublicKey, multiSigners, programId)\n    );\n\n    return await sendAndConfirmTransaction(connection, transaction, [payer, ...signers], confirmOptions);\n}\n"]},"metadata":{},"sourceType":"module"}