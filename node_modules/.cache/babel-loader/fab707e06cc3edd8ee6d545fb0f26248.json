{"ast":null,"code":"import { sendAndConfirmTransaction, SystemProgram, Transaction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from './../constants.mjs';\nimport { createInitializeAccountInstruction } from './../instructions/index.mjs';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from './../state/index.mjs';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount.mjs';\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\n\nexport async function createAccount(connection, payer, mint, owner, keypair, confirmOptions) {\n  let programId = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : TOKEN_PROGRAM_ID;\n  // If a keypair isn't provided, create the associated token account and return its address\n  if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId); // Otherwise, create the account with the provided keypair and return its public key\n\n  const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n  const transaction = new Transaction().add(SystemProgram.createAccount({\n    fromPubkey: payer.publicKey,\n    newAccountPubkey: keypair.publicKey,\n    space: ACCOUNT_SIZE,\n    lamports,\n    programId\n  }), createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId));\n  await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n  return keypair.publicKey;\n}","map":{"version":3,"mappings":"AAAA,SAKIA,yBALJ,EAOIC,aAPJ,EAQIC,WARJ,QASO,iBATP;AAUA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,kCAAT,QAAmD,6BAAnD;AACA,SAASC,YAAT,EAAuBC,qCAAvB,QAAoE,sBAApE;AACA,SAASC,4BAAT,QAA6C,oCAA7C;AAEA;;;;;;;;;;;;;;AAaA,OAAO,eAAeC,aAAf,CACHC,UADG,EAEHC,KAFG,EAGHC,IAHG,EAIHC,KAJG,EAKHC,OALG,EAMHC,cANG,EAOyB;EAAA,IAA5BC,SAA4B,uEAAhBZ,gBAAgB;EAE5B;EACA,IAAI,CAACU,OAAL,EAAc,OAAO,MAAMN,4BAA4B,CAACE,UAAD,EAAaC,KAAb,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCE,cAAjC,EAAiDC,SAAjD,CAAzC,CAHc,CAK5B;;EACA,MAAMC,QAAQ,GAAG,MAAMV,qCAAqC,CAACG,UAAD,CAA5D;EAEA,MAAMQ,WAAW,GAAG,IAAIf,WAAJ,GAAkBgB,GAAlB,CAChBjB,aAAa,CAACO,aAAd,CAA4B;IACxBW,UAAU,EAAET,KAAK,CAACU,SADM;IAExBC,gBAAgB,EAAER,OAAO,CAACO,SAFF;IAGxBE,KAAK,EAAEjB,YAHiB;IAIxBW,QAJwB;IAKxBD;EALwB,CAA5B,CADgB,EAQhBX,kCAAkC,CAACS,OAAO,CAACO,SAAT,EAAoBT,IAApB,EAA0BC,KAA1B,EAAiCG,SAAjC,CARlB,CAApB;EAWA,MAAMf,yBAAyB,CAACS,UAAD,EAAaQ,WAAb,EAA0B,CAACP,KAAD,EAAQG,OAAR,CAA1B,EAA4CC,cAA5C,CAA/B;EAEA,OAAOD,OAAO,CAACO,SAAf;AACH","names":["sendAndConfirmTransaction","SystemProgram","Transaction","TOKEN_PROGRAM_ID","createInitializeAccountInstruction","ACCOUNT_SIZE","getMinimumBalanceForRentExemptAccount","createAssociatedTokenAccount","createAccount","connection","payer","mint","owner","keypair","confirmOptions","programId","lamports","transaction","add","fromPubkey","publicKey","newAccountPubkey","space"],"sources":["/Users/khairulamirinrohmat/nft-access/bedrock-nft-access/node_modules/@solana/spl-token/src/actions/createAccount.ts"],"sourcesContent":["import {\n    ConfirmOptions,\n    Connection,\n    Keypair,\n    PublicKey,\n    sendAndConfirmTransaction,\n    Signer,\n    SystemProgram,\n    Transaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '../constants';\nimport { createInitializeAccountInstruction } from '../instructions/index';\nimport { ACCOUNT_SIZE, getMinimumBalanceForRentExemptAccount } from '../state/index';\nimport { createAssociatedTokenAccount } from './createAssociatedTokenAccount';\n\n/**\n * Create and initialize a new token account\n *\n * @param connection     Connection to use\n * @param payer          Payer of the transaction and initialization fees\n * @param mint           Mint for the account\n * @param owner          Owner of the new account\n * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n * @param confirmOptions Options for confirming the transaction\n * @param programId      SPL Token program account\n *\n * @return Address of the new token account\n */\nexport async function createAccount(\n    connection: Connection,\n    payer: Signer,\n    mint: PublicKey,\n    owner: PublicKey,\n    keypair?: Keypair,\n    confirmOptions?: ConfirmOptions,\n    programId = TOKEN_PROGRAM_ID\n): Promise<PublicKey> {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await createAssociatedTokenAccount(connection, payer, mint, owner, confirmOptions, programId);\n\n    // Otherwise, create the account with the provided keypair and return its public key\n    const lamports = await getMinimumBalanceForRentExemptAccount(connection);\n\n    const transaction = new Transaction().add(\n        SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: keypair.publicKey,\n            space: ACCOUNT_SIZE,\n            lamports,\n            programId,\n        }),\n        createInitializeAccountInstruction(keypair.publicKey, mint, owner, programId)\n    );\n\n    await sendAndConfirmTransaction(connection, transaction, [payer, keypair], confirmOptions);\n\n    return keypair.publicKey;\n}\n"]},"metadata":{},"sourceType":"module"}