import React from 'react';
import { useInterval } from './useInterval.mjs';
const DEFAULT_INTERVAL = 5000;
export function usePollReferenceStatus(getReferenceStatus, config) {
    var _a;
    const [data, setData] = React.useState(null);
    const [error, setError] = React.useState(null);
    const [isPolling, setIsPolling] = React.useState(true);
    const cancel = React.useCallback((broadcast = true) => {
        var _a;
        setIsPolling(false);
        if (broadcast) {
            (_a = config === null || config === void 0 ? void 0 : config.onCancel) === null || _a === void 0 ? void 0 : _a.call(config);
        }
    }, [isPolling]);
    useInterval(async () => {
        var _a, _b;
        try {
            const data = await getReferenceStatus({ ref: config.ref });
            if (data.signature !== null) {
                setData(data);
                (_a = config === null || config === void 0 ? void 0 : config.onComplete) === null || _a === void 0 ? void 0 : _a.call(config, data);
                cancel(false);
            }
        }
        catch (e) {
            console.error(e);
            setError(e);
            (_b = config === null || config === void 0 ? void 0 : config.onError) === null || _b === void 0 ? void 0 : _b.call(config, e);
            cancel(false);
        }
    }, (_a = config.interval) !== null && _a !== void 0 ? _a : DEFAULT_INTERVAL, isPolling);
    return {
        data,
        error,
        cancel,
    };
}
//# sourceMappingURL=usePollReferenceStatus.js.map