"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockCore = void 0;
const createLink_1 = require("../models/createLink");
class BedrockCore {
    constructor(params) {
        var _a;
        this.createTransferLink = (params) => {
            return (0, createLink_1.createLink)(this.basePath, BedrockCore.Paths.Transfer, params);
        };
        this.createEmptyWalletLink = (params) => {
            return (0, createLink_1.createLink)(this.basePath, BedrockCore.Paths.EmptyWallet, params);
        };
        this.createAuthorizationNonceLink = (params) => __awaiter(this, void 0, void 0, function* () {
            return yield (0, createLink_1.createNonceLink)(this.basePath, BedrockCore.Paths.Authorization, BedrockCore.Paths.AuthorizationNonce, params);
        });
        this.getReferenceStatus = (params) => __awaiter(this, void 0, void 0, function* () {
            const { ref } = params;
            const url = `${this.basePath}${BedrockCore.Paths.ReferenceStatus}?ref=${ref}`;
            const response = yield fetch(url);
            return yield response.json();
        });
        this.basePath = (_a = params.basePath) !== null && _a !== void 0 ? _a : 'https://pay.bedrock.fyi';
    }
}
exports.BedrockCore = BedrockCore;
BedrockCore.Paths = {
    Transfer: '/transfer',
    EmptyWallet: '/empty-wallet',
    Authorization: '/authorization',
    AuthorizationNonce: '/authorization/nonce',
    ReferenceStatus: '/reference-status',
};
//# sourceMappingURL=BedrockCore.js.map