import { CreateLinkResult, CreateNonceLinkResult, LinkCreatorParams, BaseTransactionRequestParams } from '../models/createLink';
import { TokenTypes, TransactionStatuses } from '../models/shared';
export interface TokenGate {
    collectionId?: string;
    firstCreatorId?: string;
    updateAuthorityId?: string;
    traits?: Record<string, string | number>;
    discountPercentage?: number;
}
export interface TokenDataSummary {
    name: string;
    mint: string;
    image?: string;
    traits: Record<string, string | number>;
}
export declare type TransferParams = {
    wallet: string;
    token?: TokenTypes;
    tokenAddress?: string;
    quantity?: number;
    size?: number;
    gate?: TokenGate;
} & BaseTransactionRequestParams;
export declare type EmptyWalletParams = {} & BaseTransactionRequestParams;
export declare type AuthorizationParams = {
    gate?: TokenGate;
} & BaseTransactionRequestParams;
export declare type AuthorizationData = {
    wallet: string;
    status: TransactionStatuses;
    signature: string | null;
    token: string | null;
    message?: string;
    gate?: TokenDataSummary;
};
export declare type GetReferenceStatusParams = {
    ref: string;
};
export declare type StatusData = {
    status: TransactionStatuses;
    signature?: string | null;
    message?: string | null;
};
export declare class BedrockCore {
    static Paths: Record<string, string>;
    basePath: string;
    constructor(params: LinkCreatorParams);
    createTransferLink: (params: TransferParams) => CreateLinkResult;
    createEmptyWalletLink: (params: EmptyWalletParams) => CreateLinkResult;
    createAuthorizationNonceLink: (params: AuthorizationParams) => Promise<CreateNonceLinkResult>;
    getReferenceStatus: (params: GetReferenceStatusParams) => Promise<StatusData>;
}
