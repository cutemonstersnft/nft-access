import Joi from 'joi';
import { Keypair } from '@solana/web3.js';
import { encodeURL } from '@solana/pay';
import * as JSURL from '@bedrock-foundation/jsurl';
import * as JoiUtil from './../utils/JoiUtil.mjs';
export const transferParamsSchema = Joi.object().keys({
    wallet: Joi.string().required(),
    token: Joi.string().required(),
    quantity: Joi.number().optional(),
    size: Joi.number().optional(),
    icon: Joi.string().optional(),
    label: Joi.string().optional(),
    refs: Joi.array().items(Joi.string()).default([]),
});
export const transferDeliverySchema = Joi.object().keys({
    account: Joi.string().required(),
    params: transferParamsSchema,
}).prefs({
    abortEarly: false,
});
export class TransferAction {
    constructor(basePath) {
        this.path = '/transfer';
        this.basePath = basePath || 'https://localhost:3001';
    }
    createLink(params) {
        var _a;
        const requestRef = Keypair.generate().publicKey.toBase58();
        params.refs = [requestRef, ...((_a = params === null || params === void 0 ? void 0 : params.refs) !== null && _a !== void 0 ? _a : [])];
        const url = `${this.basePath}${this.path}?params=${JSURL.stringify(params)}`;
        const link = encodeURL({ link: new URL(url) }).toString();
        return {
            link,
            refs: {
                requestRef,
            },
        };
    }
    validate(params) {
        return JoiUtil.validate(transferParamsSchema, params);
    }
    validateDelivery(params) {
        return JoiUtil.validate(transferDeliverySchema, params);
    }
}
//# sourceMappingURL=TransferAction.js.map