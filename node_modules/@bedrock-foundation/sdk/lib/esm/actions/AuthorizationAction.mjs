import Joi from 'joi';
import { Keypair } from '@solana/web3.js';
import { encodeURL } from '@solana/pay';
import * as JSURL from '@bedrock-foundation/jsurl';
import * as JoiUtil from './../utils/JoiUtil.mjs';
export const authorizationParamsSchema = Joi.object().keys({});
export const authorizationDeliverySchema = Joi.object().keys({
    account: Joi.string().required(),
    params: Joi.any(),
}).prefs({
    abortEarly: false,
});
export class AuthorizationAction {
    constructor(basePath) {
        this.path = '/authorize';
        this.noncePath = '/authorize/nonce';
        this.basePath = basePath || 'https://localhost:3001';
    }
    createLink(params) {
        var _a;
        const requestRef = Keypair.generate().publicKey.toBase58();
        params.refs = [requestRef, ...((_a = params === null || params === void 0 ? void 0 : params.refs) !== null && _a !== void 0 ? _a : [])];
        const url = `${this.basePath}${this.path}?params=${JSURL.stringify(params)}`;
        const nonceUrl = `${this.basePath}${this.noncePath}?params=${JSURL.stringify(params)}`;
        const link = encodeURL({ link: new URL(url) }).toString();
        return {
            link,
            nonceUrl,
            refs: {
                requestRef,
            },
        };
    }
    async createNonceLink(params) {
        const result = this.createLink(params);
        if (!result.nonceUrl)
            return result;
        const response = await fetch(result === null || result === void 0 ? void 0 : result.nonceUrl);
        const { nonce } = await response.json();
        result.nonce = nonce;
        return result;
    }
    validate(params) {
        return JoiUtil.validate(authorizationParamsSchema, params);
    }
    validateDelivery(params) {
        return JoiUtil.validate(authorizationDeliverySchema, params);
    }
}
//# sourceMappingURL=AuthorizationAction.js.map